From daad72078e391a2067036059cb895e621b468a6b Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Mon, 27 Nov 2023 10:22:44 +0200
Subject: [PATCH 6/8] Remove sunxi-drm kernel patches

They do not belong to this repository.

Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 ...4i-DE1.0-Add-support-for-more-DRM-fo.patch | 189 -----
 ...Add-ABxx-formats-support-to-vi-plane.patch |  30 -
 ...02-drm-sun4i-Use-vi-plane-as-primary.patch |  63 --
 ...m-sun8i-use-mode_set-engine-callback.patch | 116 ---
 ...n4i-drm-engine-Add-mode_set-callback.patch |  87 --
 ...end-route-enable-register-corruption.patch | 300 -------
 ...n4i-sun8i-Expose-blend-mode-property.patch | 245 ------
 ...-output-signal-premultiplication-for.patch |  50 --
 ...Workaround-for-scaler-hardware-relat.patch | 787 ------------------
 ...-Keep-VI-scaler-module-always-enable.patch |  29 -
 10 files changed, 1896 deletions(-)
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1500-GLODROID-drm-sun4i-DE1.0-Add-support-for-more-DRM-fo.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1501-HACK-sun4i-drm-Add-ABxx-formats-support-to-vi-plane.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1502-drm-sun4i-Use-vi-plane-as-primary.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1503-sun4i-drm-sun8i-use-mode_set-engine-callback.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1504-sun4i-drm-engine-Add-mode_set-callback.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1505-drm-sun4i-Fix-blend-route-enable-register-corruption.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1506-drm-sun4i-sun8i-Expose-blend-mode-property.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1507-drm-sun4i-Enable-output-signal-premultiplication-for.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1508-drm-sun4i-sun8i-Workaround-for-scaler-hardware-relat.patch
 delete mode 100644 patches/kernel/android13-5.15-2023-01/sun4i-drm/1509-drm-sun4i-sun8i-Keep-VI-scaler-module-always-enable.patch

diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1500-GLODROID-drm-sun4i-DE1.0-Add-support-for-more-DRM-fo.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1500-GLODROID-drm-sun4i-DE1.0-Add-support-for-more-DRM-fo.patch
deleted file mode 100644
index e84daa0..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1500-GLODROID-drm-sun4i-DE1.0-Add-support-for-more-DRM-fo.patch
+++ /dev/null
@@ -1,189 +0,0 @@
-From d03f8e45c34ad5e44f92f0471224e4583b6642d2 Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Fri, 27 Jan 2023 21:54:37 +0200
-Subject: [PATCH] GLODROID: drm/sun4i: DE1.0: Add support for more DRM formats
-
-By utilizing REG1.BRSWAPEN bit we can swap R ang B colors thus
-add support for more formats.
-
-The following formats were added:
-    DRM_FORMAT_ABGR8888 (Client target layer & regular layers)
-    DRM_FORMAT_XBGR8888 (Wallpaper, require scaling)
-
-Change-Id: Ie050e8e16049ebdc1ded174d44a31989421c07f9
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun4i_backend.c  | 31 +++++++++++++++++++++-----
- drivers/gpu/drm/sun4i/sun4i_backend.h  |  1 +
- drivers/gpu/drm/sun4i/sun4i_frontend.c |  1 +
- drivers/gpu/drm/sun4i/sun4i_layer.c    |  4 ++++
- 4 files changed, 32 insertions(+), 5 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun4i_backend.c b/drivers/gpu/drm/sun4i/sun4i_backend.c
-index bf8cfefa0..b82cd0138 100644
---- a/drivers/gpu/drm/sun4i/sun4i_backend.c
-+++ b/drivers/gpu/drm/sun4i/sun4i_backend.c
-@@ -94,13 +94,19 @@ void sun4i_backend_layer_enable(struct sun4i_backend *backend,
- 			   SUN4I_BACKEND_MODCTL_LAY_EN(layer), val);
- }
- 
--static int sun4i_backend_drm_format_to_layer(u32 format, u32 *mode)
-+static int sun4i_backend_drm_format_to_layer(u32 format, u32 *mode, u32 *brswp)
- {
-+	*brswp = 0;
- 	switch (format) {
- 	case DRM_FORMAT_ARGB8888:
- 		*mode = SUN4I_BACKEND_LAY_FBFMT_ARGB8888;
- 		break;
- 
-+	case DRM_FORMAT_ABGR8888:
-+		*mode = SUN4I_BACKEND_LAY_FBFMT_ARGB8888;
-+		*brswp = SUN4I_BACKEND_ATTCTL_REG1_LAY_BRSWAPEN;
-+		break;
-+
- 	case DRM_FORMAT_ARGB4444:
- 		*mode = SUN4I_BACKEND_LAY_FBFMT_ARGB4444;
- 		break;
-@@ -121,6 +127,11 @@ static int sun4i_backend_drm_format_to_layer(u32 format, u32 *mode)
- 		*mode = SUN4I_BACKEND_LAY_FBFMT_XRGB8888;
- 		break;
- 
-+	case DRM_FORMAT_XBGR8888:
-+		*mode = SUN4I_BACKEND_LAY_FBFMT_XRGB8888;
-+		*brswp = SUN4I_BACKEND_ATTCTL_REG1_LAY_BRSWAPEN;
-+		break;
-+
- 	case DRM_FORMAT_RGB888:
- 		*mode = SUN4I_BACKEND_LAY_FBFMT_RGB888;
- 		break;
-@@ -140,6 +151,7 @@ static const uint32_t sun4i_backend_formats[] = {
- 	DRM_FORMAT_ARGB1555,
- 	DRM_FORMAT_ARGB4444,
- 	DRM_FORMAT_ARGB8888,
-+	DRM_FORMAT_ABGR8888,
- 	DRM_FORMAT_RGB565,
- 	DRM_FORMAT_RGB888,
- 	DRM_FORMAT_RGBA4444,
-@@ -147,6 +159,7 @@ static const uint32_t sun4i_backend_formats[] = {
- 	DRM_FORMAT_UYVY,
- 	DRM_FORMAT_VYUY,
- 	DRM_FORMAT_XRGB8888,
-+	DRM_FORMAT_XBGR8888,
- 	DRM_FORMAT_YUYV,
- 	DRM_FORMAT_YVYU,
- };
-@@ -260,7 +273,7 @@ int sun4i_backend_update_layer_formats(struct sun4i_backend *backend,
- 	struct drm_plane_state *state = plane->state;
- 	struct drm_framebuffer *fb = state->fb;
- 	bool interlaced = false;
--	u32 val;
-+	u32 val, brswp;
- 	int ret;
- 
- 	/* Clear the YUV mode */
-@@ -290,7 +303,7 @@ int sun4i_backend_update_layer_formats(struct sun4i_backend *backend,
- 	if (fb->format->is_yuv)
- 		return sun4i_backend_update_yuv_format(backend, layer, plane);
- 
--	ret = sun4i_backend_drm_format_to_layer(fb->format->format, &val);
-+	ret = sun4i_backend_drm_format_to_layer(fb->format->format, &val, &brswp);
- 	if (ret) {
- 		DRM_DEBUG_DRIVER("Invalid format\n");
- 		return ret;
-@@ -300,16 +313,20 @@ int sun4i_backend_update_layer_formats(struct sun4i_backend *backend,
- 			   SUN4I_BACKEND_ATTCTL_REG1(layer),
- 			   SUN4I_BACKEND_ATTCTL_REG1_LAY_FBFMT, val);
- 
-+	regmap_update_bits(backend->engine.regs,
-+			   SUN4I_BACKEND_ATTCTL_REG1(layer),
-+			   SUN4I_BACKEND_ATTCTL_REG1_LAY_BRSWAPEN, brswp);
-+
- 	return 0;
- }
- 
- int sun4i_backend_update_layer_frontend(struct sun4i_backend *backend,
- 					int layer, uint32_t fmt)
- {
--	u32 val;
-+	u32 val, brswp;
- 	int ret;
- 
--	ret = sun4i_backend_drm_format_to_layer(fmt, &val);
-+	ret = sun4i_backend_drm_format_to_layer(fmt, &val, &brswp);
- 	if (ret) {
- 		DRM_DEBUG_DRIVER("Invalid format\n");
- 		return ret;
-@@ -324,6 +341,10 @@ int sun4i_backend_update_layer_frontend(struct sun4i_backend *backend,
- 			   SUN4I_BACKEND_ATTCTL_REG1(layer),
- 			   SUN4I_BACKEND_ATTCTL_REG1_LAY_FBFMT, val);
- 
-+	regmap_update_bits(backend->engine.regs,
-+			   SUN4I_BACKEND_ATTCTL_REG1(layer),
-+			   SUN4I_BACKEND_ATTCTL_REG1_LAY_BRSWAPEN, brswp);
-+
- 	return 0;
- }
- 
-diff --git a/drivers/gpu/drm/sun4i/sun4i_backend.h b/drivers/gpu/drm/sun4i/sun4i_backend.h
-index b4383777c..784c73b89 100644
---- a/drivers/gpu/drm/sun4i/sun4i_backend.h
-+++ b/drivers/gpu/drm/sun4i/sun4i_backend.h
-@@ -78,6 +78,7 @@
- #define SUN4I_BACKEND_ATTCTL_REG1_LAY_HSCAFCT		GENMASK(15, 14)
- #define SUN4I_BACKEND_ATTCTL_REG1_LAY_WSCAFCT		GENMASK(13, 12)
- #define SUN4I_BACKEND_ATTCTL_REG1_LAY_FBFMT		GENMASK(11, 8)
-+#define SUN4I_BACKEND_ATTCTL_REG1_LAY_BRSWAPEN		BIT(2)
- #define SUN4I_BACKEND_LAY_FBFMT_1BPP				(0 << 8)
- #define SUN4I_BACKEND_LAY_FBFMT_2BPP				(1 << 8)
- #define SUN4I_BACKEND_LAY_FBFMT_4BPP				(2 << 8)
-diff --git a/drivers/gpu/drm/sun4i/sun4i_frontend.c b/drivers/gpu/drm/sun4i/sun4i_frontend.c
-index faecc2935..0e01c98f3 100644
---- a/drivers/gpu/drm/sun4i/sun4i_frontend.c
-+++ b/drivers/gpu/drm/sun4i/sun4i_frontend.c
-@@ -327,6 +327,7 @@ sun4i_frontend_drm_format_to_input_sequence(const struct drm_format_info *format
- 		return 0;
- 
- 	case DRM_FORMAT_XRGB8888:
-+	case DRM_FORMAT_XBGR8888: /* Bypass buffer as XRGB, B and G should be swapped by the backend (not tested) */
- 		*val = SUN4I_FRONTEND_INPUT_FMT_DATA_PS_XRGB;
- 		return 0;
- 
-diff --git a/drivers/gpu/drm/sun4i/sun4i_layer.c b/drivers/gpu/drm/sun4i/sun4i_layer.c
-index 929e95f86..e5f479b79 100644
---- a/drivers/gpu/drm/sun4i/sun4i_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun4i_layer.c
-@@ -143,6 +143,7 @@ static const struct drm_plane_funcs sun4i_backend_layer_funcs = {
- 
- static const uint32_t sun4i_layer_formats[] = {
- 	DRM_FORMAT_ARGB8888,
-+	DRM_FORMAT_ABGR8888,
- 	DRM_FORMAT_ARGB4444,
- 	DRM_FORMAT_ARGB1555,
- 	DRM_FORMAT_BGRX8888,
-@@ -157,6 +158,7 @@ static const uint32_t sun4i_layer_formats[] = {
- 	DRM_FORMAT_UYVY,
- 	DRM_FORMAT_VYUY,
- 	DRM_FORMAT_XRGB8888,
-+	DRM_FORMAT_XBGR8888,
- 	DRM_FORMAT_YUV411,
- 	DRM_FORMAT_YUV420,
- 	DRM_FORMAT_YUV422,
-@@ -171,6 +173,7 @@ static const uint32_t sun4i_layer_formats[] = {
- 
- static const uint32_t sun4i_backend_layer_formats[] = {
- 	DRM_FORMAT_ARGB8888,
-+	DRM_FORMAT_ABGR8888,
- 	DRM_FORMAT_ARGB4444,
- 	DRM_FORMAT_ARGB1555,
- 	DRM_FORMAT_RGBA5551,
-@@ -180,6 +183,7 @@ static const uint32_t sun4i_backend_layer_formats[] = {
- 	DRM_FORMAT_UYVY,
- 	DRM_FORMAT_VYUY,
- 	DRM_FORMAT_XRGB8888,
-+	DRM_FORMAT_XBGR8888,
- 	DRM_FORMAT_YUYV,
- 	DRM_FORMAT_YVYU,
- };
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1501-HACK-sun4i-drm-Add-ABxx-formats-support-to-vi-plane.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1501-HACK-sun4i-drm-Add-ABxx-formats-support-to-vi-plane.patch
deleted file mode 100644
index 0b344db..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1501-HACK-sun4i-drm-Add-ABxx-formats-support-to-vi-plane.patch
+++ /dev/null
@@ -1,30 +0,0 @@
-From 738408a8de8bb8f137667c35517443553dc65ebc Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Thu, 8 Apr 2021 16:46:52 +0300
-Subject: [PATCH] HACK: sun4i/drm: Add ABxx formats support to vi plane
-
-... to fit Android DRM_HWC CLIENT layer.
-
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c | 4 ++++
- 1 file changed, 4 insertions(+)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index bb7c43036..a0d78dc79 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -487,6 +487,10 @@ static const u32 sun8i_vi_layer_formats[] = {
- 	DRM_FORMAT_YVU411,
- 	DRM_FORMAT_YVU420,
- 	DRM_FORMAT_YVU422,
-+
-+	DRM_FORMAT_ABGR1555,
-+	DRM_FORMAT_ABGR4444,
-+	DRM_FORMAT_ABGR8888,
- };
- 
- static const u32 sun8i_vi_layer_de3_formats[] = {
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1502-drm-sun4i-Use-vi-plane-as-primary.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1502-drm-sun4i-Use-vi-plane-as-primary.patch
deleted file mode 100644
index 24e88e2..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1502-drm-sun4i-Use-vi-plane-as-primary.patch
+++ /dev/null
@@ -1,63 +0,0 @@
-From f0d7ea3df87dd411c872b3d0ceac9af1ffb466a5 Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <roman.stratiienko@globallogic.com>
-Date: Thu, 19 Sep 2019 15:23:02 +0300
-Subject: [PATCH] drm/sun4i: Use vi plane as primary
-
-DE2.0 blender does not take into the account alpha channel of vi layer.
-Thus makes overlaying of this layer totally opaque.
-Using vi layer as bottom solves this issue.
-
-Tested on Android.
-
-Signed-off-by: Roman Stratiienko <roman.stratiienko@globallogic.com>
----
- drivers/gpu/drm/sun4i/sun8i_ui_layer.c | 3 ---
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c | 5 ++++-
- 2 files changed, 4 insertions(+), 4 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-index 7845c2a53..632ac74e6 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-@@ -388,9 +388,6 @@ struct sun8i_ui_layer *sun8i_ui_layer_init_one(struct drm_device *drm,
- 	if (!layer)
- 		return ERR_PTR(-ENOMEM);
- 
--	if (index == 0)
--		type = DRM_PLANE_TYPE_PRIMARY;
--
- 	/* possible crtcs are set later */
- 	ret = drm_universal_plane_init(drm, &layer->plane, 0,
- 				       &sun8i_ui_layer_funcs,
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index a0d78dc79..3014084ee 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -548,6 +548,7 @@ struct sun8i_vi_layer *sun8i_vi_layer_init_one(struct drm_device *drm,
- {
- 	u32 supported_encodings, supported_ranges;
- 	unsigned int plane_cnt, format_count;
-+	enum drm_plane_type type = DRM_PLANE_TYPE_OVERLAY;
- 	struct sun8i_vi_layer *layer;
- 	const u32 *formats;
- 	int ret;
-@@ -563,13 +564,15 @@ struct sun8i_vi_layer *sun8i_vi_layer_init_one(struct drm_device *drm,
- 		formats = sun8i_vi_layer_formats;
- 		format_count = ARRAY_SIZE(sun8i_vi_layer_formats);
- 	}
-+	if (index == 0)
-+		type = DRM_PLANE_TYPE_PRIMARY;
- 
- 	/* possible crtcs are set later */
- 	ret = drm_universal_plane_init(drm, &layer->plane, 0,
- 				       &sun8i_vi_layer_funcs,
- 				       formats, format_count,
- 				       sun8i_layer_modifiers,
--				       DRM_PLANE_TYPE_OVERLAY, NULL);
-+				       type, NULL);
- 	if (ret) {
- 		dev_err(drm->dev, "Couldn't initialize layer\n");
- 		return ERR_PTR(ret);
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1503-sun4i-drm-sun8i-use-mode_set-engine-callback.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1503-sun4i-drm-sun8i-use-mode_set-engine-callback.patch
deleted file mode 100644
index a0a7615..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1503-sun4i-drm-sun8i-use-mode_set-engine-callback.patch
+++ /dev/null
@@ -1,116 +0,0 @@
-From 5c962425d986ddf3ded38104c3baeacd4e041909 Mon Sep 17 00:00:00 2001
-From: Jernej Skrabec <jernej.skrabec@gmail.com>
-Date: Sun, 24 Apr 2022 11:26:26 -0500
-Subject: [PATCH] sun4i/drm: sun8i: use mode_set engine callback
-
-Newly introduced mode_set callback in engine structure is a much better
-place for setting mixer output size and interlace mode for the following
-reasons:
-1. Aforementioned properties change only when mode changes, so it's
-   enough to be set only once per mode set. Currently it's done whenever
-   properties of primary plane are changed.
-2. It's assumed that primary plane will always cover whole screen. While
-   this is true most of the time, it's not always. DE2/3 planes are
-   universal and mostly equal in functionality. There is no reason to
-   add artificial limitation to primary planes.
-3. The current code only works for UI layers, but some mixers do not
-   have any UI layers.
-
-Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
-[Samuel: update commit message]
-Signed-off-by: Samuel Holland <samuel@sholland.org>
-Signed-off-by: Maxime Ripard <maxime@cerno.tech>
-Link: https://patchwork.freedesktop.org/patch/msgid/20220424162633.12369-9-samuel@sholland.org
----
- drivers/gpu/drm/sun4i/sun8i_mixer.c    | 30 ++++++++++++++++++++++++++
- drivers/gpu/drm/sun4i/sun8i_ui_layer.c | 30 --------------------------
- 2 files changed, 30 insertions(+), 30 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-index 5b42cf25c..789d3515e 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-@@ -298,9 +298,39 @@ static struct drm_plane **sun8i_layers_init(struct drm_device *drm,
- 	return planes;
- }
- 
-+static void sun8i_mixer_mode_set(struct sunxi_engine *engine,
-+				 const struct drm_display_mode *mode)
-+{
-+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
-+	u32 bld_base, size, val;
-+	bool interlaced;
-+
-+	bld_base = sun8i_blender_base(mixer);
-+	interlaced = !!(mode->flags & DRM_MODE_FLAG_INTERLACE);
-+	size = SUN8I_MIXER_SIZE(mode->hdisplay, mode->vdisplay);
-+
-+	DRM_DEBUG_DRIVER("Updating global size W: %u H: %u\n",
-+			 mode->hdisplay, mode->vdisplay);
-+
-+	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_SIZE, size);
-+	regmap_write(engine->regs, SUN8I_MIXER_BLEND_OUTSIZE(bld_base), size);
-+
-+	if (interlaced)
-+		val = SUN8I_MIXER_BLEND_OUTCTL_INTERLACED;
-+	else
-+		val = 0;
-+
-+	regmap_update_bits(engine->regs, SUN8I_MIXER_BLEND_OUTCTL(bld_base),
-+			   SUN8I_MIXER_BLEND_OUTCTL_INTERLACED, val);
-+
-+	DRM_DEBUG_DRIVER("Switching display mixer interlaced mode %s\n",
-+			 interlaced ? "on" : "off");
-+}
-+
- static const struct sunxi_engine_ops sun8i_engine_ops = {
- 	.commit		= sun8i_mixer_commit,
- 	.layers_init	= sun8i_layers_init,
-+	.mode_set	= sun8i_mixer_mode_set,
- };
- 
- static const struct regmap_config sun8i_mixer_regmap_config = {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-index 632ac74e6..e04da05dd 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-@@ -120,36 +120,6 @@ static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
- 	insize = SUN8I_MIXER_SIZE(src_w, src_h);
- 	outsize = SUN8I_MIXER_SIZE(dst_w, dst_h);
- 
--	if (plane->type == DRM_PLANE_TYPE_PRIMARY) {
--		bool interlaced = false;
--		u32 val;
--
--		DRM_DEBUG_DRIVER("Primary layer, updating global size W: %u H: %u\n",
--				 dst_w, dst_h);
--		regmap_write(mixer->engine.regs,
--			     SUN8I_MIXER_GLOBAL_SIZE,
--			     outsize);
--		regmap_write(mixer->engine.regs,
--			     SUN8I_MIXER_BLEND_OUTSIZE(bld_base), outsize);
--
--		if (state->crtc)
--			interlaced = state->crtc->state->adjusted_mode.flags
--				& DRM_MODE_FLAG_INTERLACE;
--
--		if (interlaced)
--			val = SUN8I_MIXER_BLEND_OUTCTL_INTERLACED;
--		else
--			val = 0;
--
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_OUTCTL(bld_base),
--				   SUN8I_MIXER_BLEND_OUTCTL_INTERLACED,
--				   val);
--
--		DRM_DEBUG_DRIVER("Switching display mixer interlaced mode %s\n",
--				 interlaced ? "on" : "off");
--	}
--
- 	/* Set height and width */
- 	DRM_DEBUG_DRIVER("Layer source offset X: %d Y: %d\n",
- 			 state->src.x1 >> 16, state->src.y1 >> 16);
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1504-sun4i-drm-engine-Add-mode_set-callback.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1504-sun4i-drm-engine-Add-mode_set-callback.patch
deleted file mode 100644
index 9467fa4..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1504-sun4i-drm-engine-Add-mode_set-callback.patch
+++ /dev/null
@@ -1,87 +0,0 @@
-From e6c8173d47079b43a26b8f051d6dd0ce50bb1bf3 Mon Sep 17 00:00:00 2001
-From: Jernej Skrabec <jernej.skrabec@gmail.com>
-Date: Sun, 24 Apr 2022 11:26:24 -0500
-Subject: [PATCH] sun4i/drm: engine: Add mode_set callback
-
-This optional callback is useful for setting properties which depends
-only on current mode. Such properties are width, height and interlaced
-output.
-
-These properties are currently set in update layer callback for primary
-plane which is less than ideal. More about that in follow up patches,
-which will migrate that code to this newly defined callback.
-
-Signed-off-by: Jernej Skrabec <jernej.skrabec@gmail.com>
-Signed-off-by: Samuel Holland <samuel@sholland.org>
-Signed-off-by: Maxime Ripard <maxime@cerno.tech>
-Link: https://patchwork.freedesktop.org/patch/msgid/20220424162633.12369-7-samuel@sholland.org
----
- drivers/gpu/drm/sun4i/sun4i_crtc.c   |  1 +
- drivers/gpu/drm/sun4i/sunxi_engine.h | 27 +++++++++++++++++++++++++++
- 2 files changed, 28 insertions(+)
-
-diff --git a/drivers/gpu/drm/sun4i/sun4i_crtc.c b/drivers/gpu/drm/sun4i/sun4i_crtc.c
-index 59e1959e4..c30dc95ba 100644
---- a/drivers/gpu/drm/sun4i/sun4i_crtc.c
-+++ b/drivers/gpu/drm/sun4i/sun4i_crtc.c
-@@ -160,6 +160,7 @@ static void sun4i_crtc_mode_set_nofb(struct drm_crtc *crtc)
- 	struct sun4i_crtc *scrtc = drm_crtc_to_sun4i_crtc(crtc);
- 
- 	sun4i_tcon_mode_set(scrtc->tcon, encoder, mode);
-+	sunxi_engine_mode_set(scrtc->engine, mode);
- }
- 
- static const struct drm_crtc_helper_funcs sun4i_crtc_helper_funcs = {
-diff --git a/drivers/gpu/drm/sun4i/sunxi_engine.h b/drivers/gpu/drm/sun4i/sunxi_engine.h
-index 548710a93..ec8cf9b2b 100644
---- a/drivers/gpu/drm/sun4i/sunxi_engine.h
-+++ b/drivers/gpu/drm/sun4i/sunxi_engine.h
-@@ -9,6 +9,7 @@
- struct drm_plane;
- struct drm_device;
- struct drm_crtc_state;
-+struct drm_display_mode;
- 
- struct sunxi_engine;
- 
-@@ -108,6 +109,17 @@ struct sunxi_engine_ops {
- 	 * This function is optional.
- 	 */
- 	void (*vblank_quirk)(struct sunxi_engine *engine);
-+
-+	/**
-+	 * @mode_set
-+	 *
-+	 * This callback is used to set mode related parameters
-+	 * like interlacing, screen size, etc. once per mode set.
-+	 *
-+	 * This function is optional.
-+	 */
-+	void (*mode_set)(struct sunxi_engine *engine,
-+			 const struct drm_display_mode *mode);
- };
- 
- /**
-@@ -181,4 +193,19 @@ sunxi_engine_disable_color_correction(struct sunxi_engine *engine)
- 	if (engine->ops && engine->ops->disable_color_correction)
- 		engine->ops->disable_color_correction(engine);
- }
-+
-+/**
-+ * sunxi_engine_mode_set - Inform engine of a new mode
-+ * @engine:	pointer to the engine
-+ * @mode:	new mode
-+ *
-+ * Engine can use this functionality to set specifics once per mode change.
-+ */
-+static inline void
-+sunxi_engine_mode_set(struct sunxi_engine *engine,
-+		      const struct drm_display_mode *mode)
-+{
-+	if (engine->ops && engine->ops->mode_set)
-+		engine->ops->mode_set(engine, mode);
-+}
- #endif /* _SUNXI_ENGINE_H_ */
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1505-drm-sun4i-Fix-blend-route-enable-register-corruption.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1505-drm-sun4i-Fix-blend-route-enable-register-corruption.patch
deleted file mode 100644
index 8331547..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1505-drm-sun4i-Fix-blend-route-enable-register-corruption.patch
+++ /dev/null
@@ -1,300 +0,0 @@
-From c0c5956a0557ca5a61c308d2860d49ffef32b32a Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <roman.o.stratiienko@globallogic.com>
-Date: Tue, 24 May 2022 11:51:57 +0000
-Subject: [PATCH] drm/sun4i: Fix blend route/enable register corruption for
- DE2.0/DE3.0
-
-By this commit 2 related issues are solved:
-
-  Issue #1. Corruption in blend route/enable register:
-
-Register corruption happens after using old_state->zpos to disable layer
-state. Blend route/enable registers are shared with other layers
-and other layers may have already assigned this PIPE to valid value.
-
-Solution: Do not use old_state->zpos to disable the plane pipe in
-blend registers.
-
-  Issue #2. Remove disabled layer from blend route/enable registers:
-
-Since sun4i/drm are using normalized_zpos, .atomic_update() will setup
-blend route/enable pipes starting from PIPE0 to PIPEX, where X+1 is a
-number of layers used by the CRTC in this frame.
-
-Remaining pipes (PIPE[X+1] - PIPE[MAX]) can have old data that MUST be
-updated.
-
-new_state->normalized_zpos can't be used, since drm helpers won't update
-it for disabled planes.
-
-Solution:
-
-1. Track the number of total used planes for crtc.
-2. Use this number instead of zpos to disable unused blend pipes.
-
-Signed-off-by: Roman Stratiienko <roman.o.stratiienko@globallogic.com>
----
- drivers/gpu/drm/sun4i/sun8i_mixer.h    |  2 +
- drivers/gpu/drm/sun4i/sun8i_ui_layer.c | 60 +++++++++-----------------
- drivers/gpu/drm/sun4i/sun8i_ui_layer.h |  2 +
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c | 58 +++++++++----------------
- drivers/gpu/drm/sun4i/sun8i_vi_layer.h |  2 +
- 5 files changed, 47 insertions(+), 77 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-index 5b3fbee18..ebfc276b2 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-@@ -177,6 +177,8 @@ struct sun8i_mixer {
- 
- 	struct clk			*bus_clk;
- 	struct clk			*mod_clk;
-+
-+	int                             used_layers;
- };
- 
- static inline struct sun8i_mixer *
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-index e04da05dd..77c0f3076 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-@@ -24,8 +24,7 @@
- #include "sun8i_ui_scaler.h"
- 
- static void sun8i_ui_layer_enable(struct sun8i_mixer *mixer, int channel,
--				  int overlay, bool enable, unsigned int zpos,
--				  unsigned int old_zpos)
-+				  int overlay, bool enable, unsigned int zpos)
- {
- 	u32 val, bld_base, ch_base;
- 
-@@ -44,32 +43,18 @@ static void sun8i_ui_layer_enable(struct sun8i_mixer *mixer, int channel,
- 			   SUN8I_MIXER_CHAN_UI_LAYER_ATTR(ch_base, overlay),
- 			   SUN8I_MIXER_CHAN_UI_LAYER_ATTR_EN, val);
- 
--	if (!enable || zpos != old_zpos) {
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
--				   SUN8I_MIXER_BLEND_PIPE_CTL_EN(old_zpos),
--				   0);
-+	val = SUN8I_MIXER_BLEND_PIPE_CTL_EN(zpos);
- 
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_ROUTE(bld_base),
--				   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(old_zpos),
--				   0);
--	}
--
--	if (enable) {
--		val = SUN8I_MIXER_BLEND_PIPE_CTL_EN(zpos);
--
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
--				   val, val);
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
-+			   val, enable ? val : 0);
- 
--		val = channel << SUN8I_MIXER_BLEND_ROUTE_PIPE_SHIFT(zpos);
-+	val = channel << SUN8I_MIXER_BLEND_ROUTE_PIPE_SHIFT(zpos);
- 
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_ROUTE(bld_base),
--				   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(zpos),
--				   val);
--	}
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_MIXER_BLEND_ROUTE(bld_base),
-+			   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(zpos),
-+			   val);
- }
- 
- static void sun8i_ui_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
-@@ -261,32 +246,29 @@ static int sun8i_ui_layer_atomic_check(struct drm_plane *plane,
- static void sun8i_ui_layer_atomic_disable(struct drm_plane *plane,
- 					  struct drm_atomic_state *state)
- {
--	struct drm_plane_state *old_state = drm_atomic_get_old_plane_state(state,
--									   plane);
- 	struct sun8i_ui_layer *layer = plane_to_sun8i_ui_layer(plane);
--	unsigned int old_zpos = old_state->normalized_zpos;
- 	struct sun8i_mixer *mixer = layer->mixer;
- 
--	sun8i_ui_layer_enable(mixer, layer->channel, layer->overlay, false, 0,
--			      old_zpos);
-+	if (layer->en_state) {
-+		layer->en_state = false;
-+		mixer->used_layers--;
-+		sun8i_ui_layer_enable(mixer, layer->channel, layer->overlay, false,
-+				      mixer->used_layers);
-+	}
- }
- 
- static void sun8i_ui_layer_atomic_update(struct drm_plane *plane,
- 					 struct drm_atomic_state *state)
- {
--	struct drm_plane_state *old_state = drm_atomic_get_old_plane_state(state,
--									   plane);
- 	struct drm_plane_state *new_state = drm_atomic_get_new_plane_state(state,
--									   plane);
-+										plane);
- 	struct sun8i_ui_layer *layer = plane_to_sun8i_ui_layer(plane);
- 	unsigned int zpos = new_state->normalized_zpos;
--	unsigned int old_zpos = old_state->normalized_zpos;
- 	struct sun8i_mixer *mixer = layer->mixer;
- 
--	if (!new_state->visible) {
--		sun8i_ui_layer_enable(mixer, layer->channel,
--				      layer->overlay, false, 0, old_zpos);
--		return;
-+	if (!layer->en_state) {
-+		layer->en_state = true;
-+		mixer->used_layers++;
- 	}
- 
- 	sun8i_ui_layer_update_coord(mixer, layer->channel,
-@@ -298,7 +280,7 @@ static void sun8i_ui_layer_atomic_update(struct drm_plane *plane,
- 	sun8i_ui_layer_update_buffer(mixer, layer->channel,
- 				     layer->overlay, plane);
- 	sun8i_ui_layer_enable(mixer, layer->channel, layer->overlay,
--			      true, zpos, old_zpos);
-+			      true, zpos);
- }
- 
- static const struct drm_plane_helper_funcs sun8i_ui_layer_helper_funcs = {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-index e3e32ee11..43c48cf7b 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-@@ -53,6 +53,8 @@ struct sun8i_ui_layer {
- 	struct sun8i_mixer	*mixer;
- 	int			channel;
- 	int			overlay;
-+
-+	bool			en_state;
- };
- 
- static inline struct sun8i_ui_layer *
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index 3014084ee..2d2ef2a3c 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -18,8 +18,7 @@
- #include "sun8i_vi_scaler.h"
- 
- static void sun8i_vi_layer_enable(struct sun8i_mixer *mixer, int channel,
--				  int overlay, bool enable, unsigned int zpos,
--				  unsigned int old_zpos)
-+				  int overlay, bool enable, unsigned int zpos)
- {
- 	u32 val, bld_base, ch_base;
- 
-@@ -38,32 +37,18 @@ static void sun8i_vi_layer_enable(struct sun8i_mixer *mixer, int channel,
- 			   SUN8I_MIXER_CHAN_VI_LAYER_ATTR(ch_base, overlay),
- 			   SUN8I_MIXER_CHAN_VI_LAYER_ATTR_EN, val);
- 
--	if (!enable || zpos != old_zpos) {
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
--				   SUN8I_MIXER_BLEND_PIPE_CTL_EN(old_zpos),
--				   0);
--
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_ROUTE(bld_base),
--				   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(old_zpos),
--				   0);
--	}
-+	val = SUN8I_MIXER_BLEND_PIPE_CTL_EN(zpos);
- 
--	if (enable) {
--		val = SUN8I_MIXER_BLEND_PIPE_CTL_EN(zpos);
--
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
--				   val, val);
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_MIXER_BLEND_PIPE_CTL(bld_base),
-+			   val, enable ? val : 0);
- 
--		val = channel << SUN8I_MIXER_BLEND_ROUTE_PIPE_SHIFT(zpos);
-+	val = channel << SUN8I_MIXER_BLEND_ROUTE_PIPE_SHIFT(zpos);
- 
--		regmap_update_bits(mixer->engine.regs,
--				   SUN8I_MIXER_BLEND_ROUTE(bld_base),
--				   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(zpos),
--				   val);
--	}
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_MIXER_BLEND_ROUTE(bld_base),
-+			   SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(zpos),
-+			   val);
- }
- 
- static void sun8i_vi_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
-@@ -395,32 +380,29 @@ static int sun8i_vi_layer_atomic_check(struct drm_plane *plane,
- static void sun8i_vi_layer_atomic_disable(struct drm_plane *plane,
- 					  struct drm_atomic_state *state)
- {
--	struct drm_plane_state *old_state = drm_atomic_get_old_plane_state(state,
--									   plane);
- 	struct sun8i_vi_layer *layer = plane_to_sun8i_vi_layer(plane);
--	unsigned int old_zpos = old_state->normalized_zpos;
- 	struct sun8i_mixer *mixer = layer->mixer;
- 
--	sun8i_vi_layer_enable(mixer, layer->channel, layer->overlay, false, 0,
--			      old_zpos);
-+	if (layer->en_state) {
-+		layer->en_state = false;
-+		mixer->used_layers--;
-+		sun8i_vi_layer_enable(mixer, layer->channel, layer->overlay, false,
-+				      mixer->used_layers);
-+	}
- }
- 
- static void sun8i_vi_layer_atomic_update(struct drm_plane *plane,
- 					 struct drm_atomic_state *state)
- {
--	struct drm_plane_state *old_state = drm_atomic_get_old_plane_state(state,
--									   plane);
- 	struct drm_plane_state *new_state = drm_atomic_get_new_plane_state(state,
- 									   plane);
- 	struct sun8i_vi_layer *layer = plane_to_sun8i_vi_layer(plane);
- 	unsigned int zpos = new_state->normalized_zpos;
--	unsigned int old_zpos = old_state->normalized_zpos;
- 	struct sun8i_mixer *mixer = layer->mixer;
- 
--	if (!new_state->visible) {
--		sun8i_vi_layer_enable(mixer, layer->channel,
--				      layer->overlay, false, 0, old_zpos);
--		return;
-+	if (!layer->en_state) {
-+		layer->en_state = true;
-+		mixer->used_layers++;
- 	}
- 
- 	sun8i_vi_layer_update_coord(mixer, layer->channel,
-@@ -432,7 +414,7 @@ static void sun8i_vi_layer_atomic_update(struct drm_plane *plane,
- 	sun8i_vi_layer_update_buffer(mixer, layer->channel,
- 				     layer->overlay, plane);
- 	sun8i_vi_layer_enable(mixer, layer->channel, layer->overlay,
--			      true, zpos, old_zpos);
-+			      true, zpos);
- }
- 
- static const struct drm_plane_helper_funcs sun8i_vi_layer_helper_funcs = {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-index 48c399e1c..9939a4cc7 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-@@ -58,6 +58,8 @@ struct sun8i_vi_layer {
- 	struct sun8i_mixer	*mixer;
- 	int			channel;
- 	int			overlay;
-+
-+	bool			en_state;
- };
- 
- static inline struct sun8i_vi_layer *
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1506-drm-sun4i-sun8i-Expose-blend-mode-property.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1506-drm-sun4i-sun8i-Expose-blend-mode-property.patch
deleted file mode 100644
index 59c26ac..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1506-drm-sun4i-sun8i-Expose-blend-mode-property.patch
+++ /dev/null
@@ -1,245 +0,0 @@
-From 90bc9690df3ae37a32fedfb8c1be6c29e47fdb9c Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Fri, 7 Aug 2020 09:24:03 +0300
-Subject: [PATCH] drm/sun4i: sun8i: Expose blend mode property
-
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun8i_mixer.h    |  2 ++
- drivers/gpu/drm/sun4i/sun8i_ui_layer.c | 48 ++++++++++++++++++++-----
- drivers/gpu/drm/sun4i/sun8i_ui_layer.h |  5 +++
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c | 49 ++++++++++++++++++++++----
- drivers/gpu/drm/sun4i/sun8i_vi_layer.h |  5 +++
- 5 files changed, 94 insertions(+), 15 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-index ebfc276b2..5c05907e2 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-@@ -65,6 +65,8 @@
- #define SUN8I_MIXER_BLEND_ROUTE_PIPE_MSK(n)	(0xf << ((n) << 2))
- #define SUN8I_MIXER_BLEND_ROUTE_PIPE_SHIFT(n)	((n) << 2)
- 
-+#define SUN8I_MIXER_BLEND_PREMULTIPLY_EN(pipe)	BIT(pipe)
-+
- #define SUN8I_MIXER_BLEND_OUTCTL_INTERLACED	BIT(1)
- 
- #define SUN50I_MIXER_BLEND_CSC_CTL_EN(ch)	BIT(ch)
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-index 77c0f3076..880e50a15 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-@@ -58,24 +58,46 @@ static void sun8i_ui_layer_enable(struct sun8i_mixer *mixer, int channel,
- }
- 
- static void sun8i_ui_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
--					int overlay, struct drm_plane *plane)
-+					int overlay, struct drm_plane *plane,
-+					unsigned int zpos, bool force_premulti)
- {
--	u32 mask, val, ch_base;
-+	u32 mask, val, ch_base, bld_base;
-+	bool in_premulti, out_premulti;
- 
-+	bld_base = sun8i_blender_base(mixer);
- 	ch_base = sun8i_channel_base(mixer, channel);
- 
-+	in_premulti = plane->state->pixel_blend_mode == DRM_MODE_BLEND_PREMULTI;
-+	out_premulti = force_premulti || in_premulti;
-+
- 	mask = SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_MASK |
--		SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MASK;
-+	       SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MASK |
-+	       SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_MASK;
- 
- 	val = SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA(plane->state->alpha >> 8);
- 
--	val |= (plane->state->alpha == DRM_BLEND_ALPHA_OPAQUE) ?
--		SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_PIXEL :
--		SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_COMBINED;
-+	if (plane->state->pixel_blend_mode == DRM_MODE_BLEND_PIXEL_NONE) {
-+		val |= SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_LAYER;
-+	} else {
-+		val |= (plane->state->alpha == DRM_BLEND_ALPHA_OPAQUE) ?
-+			       SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_PIXEL :
-+			       SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_COMBINED;
-+
-+		if (in_premulti)
-+			val |= SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_PREMULTI;
-+	}
-+
-+	if (!in_premulti && out_premulti)
-+		val |= SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_COV2PREM;
- 
- 	regmap_update_bits(mixer->engine.regs,
- 			   SUN8I_MIXER_CHAN_UI_LAYER_ATTR(ch_base, overlay),
- 			   mask, val);
-+
-+	regmap_update_bits(
-+		mixer->engine.regs, SUN8I_MIXER_BLEND_PREMULTIPLY(bld_base),
-+		SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos),
-+		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
- }
- 
- static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
-@@ -274,7 +296,7 @@ static void sun8i_ui_layer_atomic_update(struct drm_plane *plane,
- 	sun8i_ui_layer_update_coord(mixer, layer->channel,
- 				    layer->overlay, plane, zpos);
- 	sun8i_ui_layer_update_alpha(mixer, layer->channel,
--				    layer->overlay, plane);
-+				    layer->overlay, plane, zpos, false);
- 	sun8i_ui_layer_update_formats(mixer, layer->channel,
- 				      layer->overlay, plane);
- 	sun8i_ui_layer_update_buffer(mixer, layer->channel,
-@@ -332,8 +354,8 @@ struct sun8i_ui_layer *sun8i_ui_layer_init_one(struct drm_device *drm,
- {
- 	enum drm_plane_type type = DRM_PLANE_TYPE_OVERLAY;
- 	int channel = mixer->cfg->vi_num + index;
-+	unsigned int plane_cnt, blend_modes;
- 	struct sun8i_ui_layer *layer;
--	unsigned int plane_cnt;
- 	int ret;
- 
- 	layer = devm_kzalloc(drm->dev, sizeof(*layer), GFP_KERNEL);
-@@ -359,6 +381,16 @@ struct sun8i_ui_layer *sun8i_ui_layer_init_one(struct drm_device *drm,
- 		return ERR_PTR(ret);
- 	}
- 
-+	blend_modes = BIT(DRM_MODE_BLEND_PREMULTI) |
-+		      BIT(DRM_MODE_BLEND_COVERAGE) |
-+		      BIT(DRM_MODE_BLEND_PIXEL_NONE);
-+
-+	ret = drm_plane_create_blend_mode_property(&layer->plane, blend_modes);
-+	if (ret) {
-+		dev_err(drm->dev, "Couldn't add blend mode property\n");
-+		return ERR_PTR(ret);
-+	}
-+
- 	ret = drm_plane_create_zpos_property(&layer->plane, channel,
- 					     0, plane_cnt - 1);
- 	if (ret) {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-index 43c48cf7b..bd3c30e80 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-@@ -46,6 +46,11 @@
- #define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_LAYER		((1) << 1)
- #define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_ALPHA_MODE_COMBINED	((2) << 1)
- 
-+#define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_MASK	GENMASK(17, 16)
-+#define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_COVERAGE	((0) << 16)
-+#define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_COV2PREM	((1) << 16)
-+#define SUN8I_MIXER_CHAN_UI_LAYER_ATTR_BLEND_PREMULTI	((2) << 16)
-+
- struct sun8i_mixer;
- 
- struct sun8i_ui_layer {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index 2d2ef2a3c..caaf138a3 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -52,21 +52,38 @@ static void sun8i_vi_layer_enable(struct sun8i_mixer *mixer, int channel,
- }
- 
- static void sun8i_vi_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
--					int overlay, struct drm_plane *plane)
-+					int overlay, struct drm_plane *plane,
-+					unsigned int zpos, bool force_premulti)
- {
--	u32 mask, val, ch_base;
-+	u32 mask, val, ch_base, bld_base;
-+	bool in_premulti = false, out_premulti = false;
- 
- 	ch_base = sun8i_channel_base(mixer, channel);
-+	bld_base = sun8i_blender_base(mixer);
- 
- 	if (mixer->cfg->is_de3) {
-+		in_premulti = plane->state->pixel_blend_mode == DRM_MODE_BLEND_PREMULTI;
-+		out_premulti = force_premulti || in_premulti;
-+
- 		mask = SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MASK |
--		       SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_MASK;
-+		       SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_MASK |
-+		       SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_MASK;
- 		val = SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA
- 			(plane->state->alpha >> 8);
- 
--		val |= (plane->state->alpha == DRM_BLEND_ALPHA_OPAQUE) ?
--			SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_PIXEL :
--			SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_COMBINED;
-+		if (plane->state->pixel_blend_mode == DRM_MODE_BLEND_PIXEL_NONE) {
-+			val |= SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_LAYER;
-+		} else {
-+			val |= (plane->state->alpha == DRM_BLEND_ALPHA_OPAQUE) ?
-+				       SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_PIXEL :
-+				       SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_COMBINED;
-+
-+			if (in_premulti)
-+				val |= SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_PREMULTI;
-+		}
-+
-+		if (!in_premulti && out_premulti)
-+			val |= SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_COV2PREM;
- 
- 		regmap_update_bits(mixer->engine.regs,
- 				   SUN8I_MIXER_CHAN_VI_LAYER_ATTR(ch_base,
-@@ -79,6 +96,11 @@ static void sun8i_vi_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
- 				   SUN8I_MIXER_FCC_GLOBAL_ALPHA
- 					(plane->state->alpha >> 8));
- 	}
-+
-+	regmap_update_bits(
-+		mixer->engine.regs, SUN8I_MIXER_BLEND_PREMULTIPLY(bld_base),
-+		SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos),
-+		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
- }
- 
- static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, int channel,
-@@ -408,7 +430,7 @@ static void sun8i_vi_layer_atomic_update(struct drm_plane *plane,
- 	sun8i_vi_layer_update_coord(mixer, layer->channel,
- 				    layer->overlay, plane, zpos);
- 	sun8i_vi_layer_update_alpha(mixer, layer->channel,
--				    layer->overlay, plane);
-+				    layer->overlay, plane, zpos, false);
- 	sun8i_vi_layer_update_formats(mixer, layer->channel,
- 				      layer->overlay, plane);
- 	sun8i_vi_layer_update_buffer(mixer, layer->channel,
-@@ -570,6 +592,19 @@ struct sun8i_vi_layer *sun8i_vi_layer_init_one(struct drm_device *drm,
- 		}
- 	}
- 
-+	if (mixer->cfg->is_de3) {
-+		unsigned int blend_modes = BIT(DRM_MODE_BLEND_PREMULTI) |
-+					   BIT(DRM_MODE_BLEND_COVERAGE) |
-+					   BIT(DRM_MODE_BLEND_PIXEL_NONE);
-+
-+		ret = drm_plane_create_blend_mode_property(&layer->plane,
-+							   blend_modes);
-+		if (ret) {
-+			dev_err(drm->dev, "Couldn't add blend mode property\n");
-+			return ERR_PTR(ret);
-+		}
-+	}
-+
- 	ret = drm_plane_create_zpos_property(&layer->plane, index,
- 					     0, plane_cnt - 1);
- 	if (ret) {
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-index 9939a4cc7..ccf91f09f 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-@@ -44,6 +44,11 @@
- #define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MASK	GENMASK(31, 24)
- #define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA(x)	((x) << 24)
- 
-+#define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_MASK	GENMASK(17, 16)
-+#define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_COVERAGE	((0) << 16)
-+#define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_COV2PREM	((1) << 16)
-+#define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_BLEND_PREMULTI	((2) << 16)
-+
- #define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_PIXEL	((0) << 1)
- #define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_LAYER	((1) << 1)
- #define SUN50I_MIXER_CHAN_VI_LAYER_ATTR_ALPHA_MODE_COMBINED	((2) << 1)
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1507-drm-sun4i-Enable-output-signal-premultiplication-for.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1507-drm-sun4i-Enable-output-signal-premultiplication-for.patch
deleted file mode 100644
index ba18e0a..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1507-drm-sun4i-Enable-output-signal-premultiplication-for.patch
+++ /dev/null
@@ -1,50 +0,0 @@
-From e3109a1d83b92919d2833315885dbcbdd6ebdbe8 Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Thu, 2 Jun 2022 09:57:58 +0000
-Subject: [PATCH] drm/sun4i: Enable output signal premultiplication for DE2/DE3
-
-Otherwise alpha value is discarded, resulting incorrect pixel
-apperance on the display.
-
-This also fixes missing transparency for the most bottom layer.
-
-Test applications and videos w/ w/o this patch are available at [1].
-
-[1]: https://github.com/GloDroid/glodroid_tests/issues/1
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun8i_mixer.c | 5 +++--
- drivers/gpu/drm/sun4i/sun8i_mixer.h | 1 +
- 2 files changed, 4 insertions(+), 2 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-index 789d3515e..d76a4dbd5 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-@@ -320,8 +320,9 @@ static void sun8i_mixer_mode_set(struct sunxi_engine *engine,
- 	else
- 		val = 0;
- 
--	regmap_update_bits(engine->regs, SUN8I_MIXER_BLEND_OUTCTL(bld_base),
--			   SUN8I_MIXER_BLEND_OUTCTL_INTERLACED, val);
-+	val |= SUN8I_MIXER_BLEND_OUTCTL_PREMULTIPLY;
-+
-+	regmap_write(engine->regs, SUN8I_MIXER_BLEND_OUTCTL(bld_base), val);
- 
- 	DRM_DEBUG_DRIVER("Switching display mixer interlaced mode %s\n",
- 			 interlaced ? "on" : "off");
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-index 5c05907e2..44167f60d 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-@@ -67,6 +67,7 @@
- 
- #define SUN8I_MIXER_BLEND_PREMULTIPLY_EN(pipe)	BIT(pipe)
- 
-+#define SUN8I_MIXER_BLEND_OUTCTL_PREMULTIPLY	BIT(0)
- #define SUN8I_MIXER_BLEND_OUTCTL_INTERLACED	BIT(1)
- 
- #define SUN50I_MIXER_BLEND_CSC_CTL_EN(ch)	BIT(ch)
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1508-drm-sun4i-sun8i-Workaround-for-scaler-hardware-relat.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1508-drm-sun4i-sun8i-Workaround-for-scaler-hardware-relat.patch
deleted file mode 100644
index 4f09f03..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1508-drm-sun4i-sun8i-Workaround-for-scaler-hardware-relat.patch
+++ /dev/null
@@ -1,787 +0,0 @@
-From 809824ac49a74da3fab14ae4999fdc488848768d Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Fri, 10 Jun 2022 19:34:39 +0300
-Subject: [PATCH] drm/sun4i: sun8i: Workaround for scaler hardware-related
- issues
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-[Problem]
-Mainline drm/sun4i DE2 and DE3 always had problems with scaling:
-Anytime when a user changes scale ratio on-screen glitches appear and in
-some cases the whole pipeline can freeze which requires system restart.
-
-Users who can benefit from scale-based animation have to disable
-hardware acceleration and use GPU for such cases which affects
-performance.
-
-[Investigation]
-I noticed that the top part of the screen usually does not have any
-glitches while after "ray" passes some vertical line glitches start
-to appear. Later-on I discovered that a glitch appeared once a new
-commit was sent to the DRM and the vertical line that splits the screen
-into top and bottom half depends on the time offset commit was sent.
-
-All this guided me to the set of scaler hardware registers that for some
-reason does not wait for VSYNC edge and instead is used by hardware
-immediately after being set.
-
-Broken registers can be easily probed using devmem.
-To do that first we must prepare some scale-containing commit and keep it
-on the screen. Then using devmem tool change register values. In case
-something changes on the screen, the register has a double-buffering issue.
-If change can be seen only after storing 1 into the mixer.dbuff register,
-then the register doesn't have a double buffering issue.
-
-Using the method described above the following broken register set was
-discovered:
-
- - VSU.CTRL.EN
-
- - UIS.CTRL.EN
- - UIS.OUTSIZE
- - UIS.INSIZE
- - UIS.HSTEP
- - UIS.VSTEP
- - UIS.HPHASE
- - UIS.VPHASE0
-
-The only solution (to be precise - workaround) that I can see as far is
-to set these registers during VBLANK.
-
-[Challenges]
-1.a. VBLANK interrupt can be temporarily disabled. This situation can
-     occur when a lot of serial console dmesg output are pending.
-1.b. VBLANK interrupt can be delayed while CPU is handling another
-     interrupt.
-1.c. VBLANK duration can be smaller than required due to small display
-     mode vporch values
-
-2.a. Difference between UIS[ch].OutSize and BLD[z].InSize can cause
-     pipeline freeze.
-2.b. UIS[ch].OutSize is set once the register is updated while
-     BLD[z].InSize is latched on vsync negative edge.
-
-3.a. Race conditions can occur when VSYNC finishes before we set all the
-     registers.
-
-[Conclusion]
-There is no reliable solution for this problem. But there is a workaround
-that can eliminate pipeline freeze cases and can significantly reduce
-screen glitches, which is enough to enable scale-based animations in
-most of cases.
-
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun4i_tcon.c      |   6 +-
- drivers/gpu/drm/sun4i/sun8i_mixer.c     | 116 +++++++++++++++++++++++-
- drivers/gpu/drm/sun4i/sun8i_mixer.h     |  11 +++
- drivers/gpu/drm/sun4i/sun8i_ui_layer.c  |  36 ++++----
- drivers/gpu/drm/sun4i/sun8i_ui_layer.h  |   3 +
- drivers/gpu/drm/sun4i/sun8i_ui_scaler.c |  85 ++++++++++++++---
- drivers/gpu/drm/sun4i/sun8i_ui_scaler.h |  24 ++++-
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c  |  16 ++--
- drivers/gpu/drm/sun4i/sun8i_vi_layer.h  |   4 +
- drivers/gpu/drm/sun4i/sun8i_vi_scaler.c |  59 +++++++++++-
- drivers/gpu/drm/sun4i/sun8i_vi_scaler.h |  28 +++++-
- 11 files changed, 329 insertions(+), 59 deletions(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun4i_tcon.c b/drivers/gpu/drm/sun4i/sun4i_tcon.c
-index 411ac3eab..d1b7781ef 100644
---- a/drivers/gpu/drm/sun4i/sun4i_tcon.c
-+++ b/drivers/gpu/drm/sun4i/sun4i_tcon.c
-@@ -796,6 +796,9 @@ static irqreturn_t sun4i_tcon_handler(int irq, void *private)
- 			SUN4I_TCON_GINT0_TCON0_TRI_FINISH_INT)))
- 		return IRQ_NONE;
- 
-+	if (engine->ops->vblank_quirk)
-+		engine->ops->vblank_quirk(engine);
-+
- 	drm_crtc_handle_vblank(&scrtc->crtc);
- 	sun4i_tcon_finish_page_flip(drm, scrtc);
- 
-@@ -806,9 +809,6 @@ static irqreturn_t sun4i_tcon_handler(int irq, void *private)
- 			   SUN4I_TCON_GINT0_TCON0_TRI_FINISH_INT,
- 			   0);
- 
--	if (engine->ops->vblank_quirk)
--		engine->ops->vblank_quirk(engine);
--
- 	return IRQ_HANDLED;
- }
- 
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-index d76a4dbd5..9abe1f1dc 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
-@@ -248,12 +248,81 @@ int sun8i_mixer_drm_format_to_hw(u32 format, u32 *hw_format)
- 	return -EINVAL;
- }
- 
-+static void sun8i_set_dbuff_active(struct sunxi_engine *engine)
-+{
-+	u32 reg;
-+
-+	regmap_read(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, &reg);
-+	if (reg & SUN8I_MIXER_GLOBAL_DBUFF_ENABLE) /* Already raised */
-+		return;
-+
-+	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
-+}
-+
-+static void sun8i_scaler_regs_update(struct sunxi_engine *engine)
-+{
-+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
-+	int layer;
-+
-+	for (layer = 0; layer < SUN8I_MAX_LAYERS; layer++) {
-+		if (!mixer->scale[layer])
-+			continue;
-+
-+		if (layer < mixer->cfg->vi_num)
-+			sun8i_vi_scaler_apply(mixer, layer,
-+					      (struct sun8i_vis_data *)mixer->scale[layer]);
-+		else
-+			sun8i_ui_scaler_apply(mixer, layer,
-+					      (struct sun8i_uis_data *)mixer->scale[layer]);
-+
-+		mixer->scale[layer] = 0;
-+	}
-+
-+	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
-+
-+	mixer->scale_update_staged = false;
-+	mixer->scale_updated = false;
-+}
-+
-+static void sun8i_atomic_begin(struct sunxi_engine *engine,
-+			       struct drm_crtc_state *old_state)
-+{
-+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
-+	u32 reg;
-+	int ret;
-+
-+	ret = regmap_read_poll_timeout(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, reg,
-+				       !(reg & SUN8I_MIXER_GLOBAL_DBUFF_ENABLE) &&
-+				       !READ_ONCE(mixer->scale_updated), 1000, 50000);
-+}
-+
-+static void sun8i_vblank_handler(struct sunxi_engine *engine)
-+{
-+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
-+
-+	if (mixer->has_irq || !mixer->scale_update_staged)
-+		return;
-+
-+	sun8i_scaler_regs_update(engine);
-+}
-+
- static void sun8i_mixer_commit(struct sunxi_engine *engine)
- {
-+	struct sun8i_mixer* mixer = engine_to_sun8i_mixer(engine);
-+
- 	DRM_DEBUG_DRIVER("Committing changes\n");
- 
--	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF,
--		     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
-+	if (mixer->scale_updated) {
-+		mixer->scale_update_staged = true;
-+		if (!mixer->has_irq)
-+			return;
-+
-+		regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_CTL,
-+				   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN,
-+				   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN);
-+	} else {
-+		sun8i_set_dbuff_active(engine);
-+	}
- }
- 
- static struct drm_plane **sun8i_layers_init(struct drm_device *drm,
-@@ -324,14 +393,18 @@ static void sun8i_mixer_mode_set(struct sunxi_engine *engine,
- 
- 	regmap_write(engine->regs, SUN8I_MIXER_BLEND_OUTCTL(bld_base), val);
- 
-+	sun8i_set_dbuff_active(engine);
-+
- 	DRM_DEBUG_DRIVER("Switching display mixer interlaced mode %s\n",
- 			 interlaced ? "on" : "off");
- }
- 
- static const struct sunxi_engine_ops sun8i_engine_ops = {
-+	.atomic_begin	= sun8i_atomic_begin,
- 	.commit		= sun8i_mixer_commit,
- 	.layers_init	= sun8i_layers_init,
- 	.mode_set	= sun8i_mixer_mode_set,
-+	.vblank_quirk   = sun8i_vblank_handler,
- };
- 
- static const struct regmap_config sun8i_mixer_regmap_config = {
-@@ -361,6 +434,31 @@ static int sun8i_mixer_of_get_id(struct device_node *node)
- 	return of_ep.id;
- }
- 
-+static irqreturn_t sun8i_mixer_handler(int irq, void *private)
-+{
-+	struct sun8i_mixer *mixer = private;
-+	struct sunxi_engine *engine = &mixer->engine;
-+
-+	unsigned int status;
-+
-+	regmap_read(engine->regs, SUN8I_MIXER_GLOBAL_STATUS, &status);
-+
-+	if (!(status & SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS))
-+		return IRQ_NONE;
-+
-+	sun8i_scaler_regs_update(engine);
-+
-+	/* Acknowledge the interrupt */
-+	regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_STATUS,
-+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS,
-+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS);
-+
-+	regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_CTL,
-+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN, 0);
-+
-+	return IRQ_HANDLED;
-+}
-+
- static int sun8i_mixer_bind(struct device *dev, struct device *master,
- 			      void *data)
- {
-@@ -372,7 +470,7 @@ static int sun8i_mixer_bind(struct device *dev, struct device *master,
- 	void __iomem *regs;
- 	unsigned int base;
- 	int plane_cnt;
--	int i, ret;
-+	int i, ret, irq;
- 
- 	/*
- 	 * The mixer uses single 32-bit register to store memory
-@@ -445,6 +543,18 @@ static int sun8i_mixer_bind(struct device *dev, struct device *master,
- 		return ret;
- 	}
- 
-+	irq = platform_get_irq(pdev, 0);
-+	if (irq < 0) {
-+		dev_warn(dev, "Couldn't find the IRQ\n");
-+	} else {
-+		ret = devm_request_irq(dev, irq, sun8i_mixer_handler,
-+				       IRQF_SHARED, dev_name(dev), mixer);
-+		if (ret)
-+			dev_warn(dev, "Couldn't request the IRQ\n");
-+		else
-+			mixer->has_irq = true;
-+	}
-+
- 	mixer->bus_clk = devm_clk_get(dev, "bus");
- 	if (IS_ERR(mixer->bus_clk)) {
- 		dev_err(dev, "Couldn't get the mixer bus clock\n");
-diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-index 44167f60d..83c097d1c 100644
---- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
-@@ -21,6 +21,10 @@
- #define SUN8I_MIXER_GLOBAL_SIZE			0xc
- 
- #define SUN8I_MIXER_GLOBAL_CTL_RT_EN		BIT(0)
-+#define SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN	BIT(4)
-+
-+#define SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS	BIT(0)
-+#define SUN8I_MIXER_GLOBAL_BUSY_STATUS		BIT(4)
- 
- #define SUN8I_MIXER_GLOBAL_DBUFF_ENABLE		BIT(0)
- 
-@@ -144,6 +148,8 @@
- #define SUN50I_MIXER_CDC0_EN			0xd0000
- #define SUN50I_MIXER_CDC1_EN			0xd8000
- 
-+#define SUN8I_MAX_LAYERS			5
-+
- /**
-  * struct sun8i_mixer_cfg - mixer HW configuration
-  * @vi_num: number of VI channels
-@@ -182,6 +188,11 @@ struct sun8i_mixer {
- 	struct clk			*mod_clk;
- 
- 	int                             used_layers;
-+
-+	bool				has_irq;
-+	bool				scale_updated;
-+	bool				scale_update_staged;
-+	void				*scale[SUN8I_MAX_LAYERS];
- };
- 
- static inline struct sun8i_mixer *
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-index 880e50a15..7306e8da4 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
-@@ -100,11 +100,12 @@ static void sun8i_ui_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
- 		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
- }
- 
--static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
-+static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
- 				       int overlay, struct drm_plane *plane,
- 				       unsigned int zpos)
- {
- 	struct drm_plane_state *state = plane->state;
-+	int channel = layer->channel;
- 	u32 src_w, src_h, dst_w, dst_h;
- 	u32 bld_base, ch_base;
- 	u32 outsize, insize;
-@@ -127,17 +128,6 @@ static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
- 	insize = SUN8I_MIXER_SIZE(src_w, src_h);
- 	outsize = SUN8I_MIXER_SIZE(dst_w, dst_h);
- 
--	/* Set height and width */
--	DRM_DEBUG_DRIVER("Layer source offset X: %d Y: %d\n",
--			 state->src.x1 >> 16, state->src.y1 >> 16);
--	DRM_DEBUG_DRIVER("Layer source size W: %d H: %d\n", src_w, src_h);
--	regmap_write(mixer->engine.regs,
--		     SUN8I_MIXER_CHAN_UI_LAYER_SIZE(ch_base, overlay),
--		     insize);
--	regmap_write(mixer->engine.regs,
--		     SUN8I_MIXER_CHAN_UI_OVL_SIZE(ch_base),
--		     insize);
--
- 	if (insize != outsize || hphase || vphase) {
- 		u32 hscale, vscale;
- 
-@@ -146,14 +136,24 @@ static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
- 		hscale = state->src_w / state->crtc_w;
- 		vscale = state->src_h / state->crtc_h;
- 
--		sun8i_ui_scaler_setup(mixer, channel, src_w, src_h, dst_w,
--				      dst_h, hscale, vscale, hphase, vphase);
--		sun8i_ui_scaler_enable(mixer, channel, true);
-+		sun8i_ui_scaler_deferred_setup(mixer, layer, src_w, src_h, dst_w, dst_h,
-+					       hscale, vscale, hphase, vphase);
- 	} else {
- 		DRM_DEBUG_DRIVER("HW scaling is not needed\n");
--		sun8i_ui_scaler_enable(mixer, channel, false);
-+		sun8i_ui_scaler_deferred_disable(mixer, layer);
- 	}
- 
-+	/* Set height and width */
-+	DRM_DEBUG_DRIVER("Layer source offset X: %d Y: %d\n",
-+			 state->src.x1 >> 16, state->src.y1 >> 16);
-+	DRM_DEBUG_DRIVER("Layer source size W: %d H: %d\n", src_w, src_h);
-+	regmap_write(mixer->engine.regs,
-+		     SUN8I_MIXER_CHAN_UI_LAYER_SIZE(ch_base, overlay),
-+		     insize);
-+	regmap_write(mixer->engine.regs,
-+		     SUN8I_MIXER_CHAN_UI_OVL_SIZE(ch_base),
-+		     insize);
-+
- 	/* Set base coordinates */
- 	DRM_DEBUG_DRIVER("Layer destination coordinates X: %d Y: %d\n",
- 			 state->dst.x1, state->dst.y1);
-@@ -276,6 +276,7 @@ static void sun8i_ui_layer_atomic_disable(struct drm_plane *plane,
- 		mixer->used_layers--;
- 		sun8i_ui_layer_enable(mixer, layer->channel, layer->overlay, false,
- 				      mixer->used_layers);
-+		sun8i_ui_scaler_deferred_disable(mixer, layer);
- 	}
- }
- 
-@@ -293,8 +294,7 @@ static void sun8i_ui_layer_atomic_update(struct drm_plane *plane,
- 		mixer->used_layers++;
- 	}
- 
--	sun8i_ui_layer_update_coord(mixer, layer->channel,
--				    layer->overlay, plane, zpos);
-+	sun8i_ui_layer_update_coord(mixer, layer, layer->overlay, plane, zpos);
- 	sun8i_ui_layer_update_alpha(mixer, layer->channel,
- 				    layer->overlay, plane, zpos, false);
- 	sun8i_ui_layer_update_formats(mixer, layer->channel,
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-index bd3c30e80..2223fb6dd 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
-@@ -14,6 +14,8 @@
- 
- #include <drm/drm_plane.h>
- 
-+#include "sun8i_ui_scaler.h"
-+
- #define SUN8I_MIXER_CHAN_UI_LAYER_ATTR(base, layer) \
- 			((base) + 0x20 * (layer) + 0x0)
- #define SUN8I_MIXER_CHAN_UI_LAYER_SIZE(base, layer) \
-@@ -60,6 +62,7 @@ struct sun8i_ui_layer {
- 	int			overlay;
- 
- 	bool			en_state;
-+	struct sun8i_uis_data   scale;
- };
- 
- static inline struct sun8i_ui_layer *
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
-index ae0806bcc..9d75a0c23 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
-@@ -10,7 +10,9 @@
-  */
- 
- #include "sun8i_ui_scaler.h"
-+
- #include "sun8i_vi_scaler.h"
-+#include "sun8i_ui_layer.h"
- 
- static const u32 lan2coefftab16[240] = {
- 	0x00004000, 0x00033ffe, 0x00063efc, 0x000a3bfb,
-@@ -127,30 +129,26 @@ static int sun8i_ui_scaler_coef_index(unsigned int step)
- 	}
- }
- 
--void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
-+static void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
- {
--	u32 val, base;
-+	u32 base;
- 
- 	if (WARN_ON(layer < mixer->cfg->vi_num))
- 		return;
- 
- 	base = sun8i_ui_scaler_base(mixer, layer);
- 
--	if (enable)
--		val = SUN8I_SCALER_GSU_CTRL_EN |
--		      SUN8I_SCALER_GSU_CTRL_COEFF_RDY;
--	else
--		val = 0;
--
--	regmap_write(mixer->engine.regs, SUN8I_SCALER_GSU_CTRL(base), val);
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_SCALER_GSU_CTRL(base),
-+			   SUN8I_SCALER_GSU_CTRL_EN,
-+			   enable ? SUN8I_SCALER_GSU_CTRL_EN : 0);
- }
- 
--void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
--			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
--			   u32 hscale, u32 vscale, u32 hphase, u32 vphase)
-+static void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
-+				  u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				  u32 hscale, u32 vscale, u32 hphase, u32 vphase)
- {
- 	u32 insize, outsize;
--	int i, offset;
- 	u32 base;
- 
- 	if (WARN_ON(layer < mixer->cfg->vi_num))
-@@ -178,10 +176,71 @@ void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
- 		     SUN8I_SCALER_GSU_HPHASE(base), hphase);
- 	regmap_write(mixer->engine.regs,
- 		     SUN8I_SCALER_GSU_VPHASE(base), vphase);
-+}
-+
-+static void sun8i_ui_scaler_coeff_setup(struct sun8i_mixer *mixer, int layer, u32 hscale)
-+{
-+	u32 base = sun8i_ui_scaler_base(mixer, layer);
-+	int i, offset;
-+
- 	offset = sun8i_ui_scaler_coef_index(hscale) *
- 			SUN8I_UI_SCALER_COEFF_COUNT;
- 	for (i = 0; i < SUN8I_UI_SCALER_COEFF_COUNT; i++)
- 		regmap_write(mixer->engine.regs,
- 			     SUN8I_SCALER_GSU_HCOEFF(base, i),
- 			     lan2coefftab16[offset + i]);
-+
-+	regmap_update_bits(mixer->engine.regs,
-+			   SUN8I_SCALER_GSU_CTRL(base),
-+			   SUN8I_SCALER_GSU_CTRL_COEFF_RDY,
-+			   SUN8I_SCALER_GSU_CTRL_COEFF_RDY);
-+}
-+
-+void sun8i_ui_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer)
-+{
-+	if (!layer->scale.en)
-+		return;
-+
-+	layer->scale.en = false;
-+	mixer->scale[layer->channel] = &layer->scale;
-+	mixer->scale_updated = true;
-+}
-+
-+void sun8i_ui_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
-+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase)
-+{
-+	struct sun8i_uis_data data = {
-+		.en = true,
-+		.src_w = src_w,
-+		.src_h = src_h,
-+		.dst_w = dst_w,
-+		.dst_h = dst_h,
-+		.hscale = hscale,
-+		.vscale = vscale,
-+		.hphase = hphase,
-+		.vphase = vphase,
-+	};
-+
-+	/* Skip expensive scaler register setup if nothing changed */
-+	if (!memcmp(&data, &layer->scale, sizeof(data)))
-+		return;
-+
-+	/* COEFF double-buffering isn't broken */
-+	if (layer->scale.hscale != data.hscale)
-+		sun8i_ui_scaler_coeff_setup(mixer, layer->channel, data.hscale);
-+
-+	memcpy(&layer->scale, &data, sizeof(data));
-+	mixer->scale[layer->channel] = &layer->scale;
-+	mixer->scale_updated = true;
-+}
-+
-+void sun8i_ui_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_uis_data *data)
-+{
-+	if (data->en)
-+		sun8i_ui_scaler_setup(mixer, layer, data->src_w, data->src_h, data->dst_w,
-+				      data->dst_h, data->hscale, data->vscale,
-+				      data->hphase, data->vphase);
-+
-+	sun8i_ui_scaler_enable(mixer, layer, data->en);
- }
-diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
-index 1ef4bd6f2..8b858f6dc 100644
---- a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
-@@ -35,9 +35,25 @@
- #define SUN8I_SCALER_GSU_CTRL_EN		BIT(0)
- #define SUN8I_SCALER_GSU_CTRL_COEFF_RDY		BIT(4)
- 
--void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable);
--void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
--			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
--			   u32 hscale, u32 vscale, u32 hphase, u32 vphase);
-+struct sun8i_uis_data {
-+	bool	en;
-+	u32	src_w;
-+	u32	src_h;
-+	u32	dst_w;
-+	u32	dst_h;
-+	u32	hscale;
-+	u32	vscale;
-+	u32	hphase;
-+	u32	vphase;
-+};
-+
-+struct sun8i_ui_layer;
-+
-+void sun8i_ui_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer);
-+void sun8i_ui_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
-+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase);
-+
-+void sun8i_ui_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_uis_data *data);
- 
- #endif
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index caaf138a3..d2526f7e9 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -103,13 +103,14 @@ static void sun8i_vi_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
- 		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
- }
- 
--static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, int channel,
-+static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
- 				       int overlay, struct drm_plane *plane,
- 				       unsigned int zpos)
- {
- 	struct drm_plane_state *state = plane->state;
- 	const struct drm_format_info *format = state->fb->format;
- 	u32 src_w, src_h, dst_w, dst_h;
-+	int channel = layer->channel;
- 	u32 bld_base, ch_base;
- 	u32 outsize, insize;
- 	u32 hphase, vphase;
-@@ -208,13 +209,12 @@ static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, int channel,
- 		hscale = (src_w << 16) / dst_w;
- 		vscale = (src_h << 16) / dst_h;
- 
--		sun8i_vi_scaler_setup(mixer, channel, src_w, src_h, dst_w,
--				      dst_h, hscale, vscale, hphase, vphase,
--				      format);
--		sun8i_vi_scaler_enable(mixer, channel, true);
-+		sun8i_vi_scaler_deferred_setup(mixer, layer, src_w, src_h, dst_w,
-+					       dst_h, hscale, vscale, hphase, vphase,
-+					       format);
- 	} else {
- 		DRM_DEBUG_DRIVER("HW scaling is not needed\n");
--		sun8i_vi_scaler_enable(mixer, channel, false);
-+		sun8i_vi_scaler_deferred_disable(mixer, layer);
- 	}
- 
- 	regmap_write(mixer->engine.regs,
-@@ -410,6 +410,7 @@ static void sun8i_vi_layer_atomic_disable(struct drm_plane *plane,
- 		mixer->used_layers--;
- 		sun8i_vi_layer_enable(mixer, layer->channel, layer->overlay, false,
- 				      mixer->used_layers);
-+		sun8i_vi_scaler_deferred_disable(mixer, layer);
- 	}
- }
- 
-@@ -427,8 +428,7 @@ static void sun8i_vi_layer_atomic_update(struct drm_plane *plane,
- 		mixer->used_layers++;
- 	}
- 
--	sun8i_vi_layer_update_coord(mixer, layer->channel,
--				    layer->overlay, plane, zpos);
-+	sun8i_vi_layer_update_coord(mixer, layer, layer->overlay, plane, zpos);
- 	sun8i_vi_layer_update_alpha(mixer, layer->channel,
- 				    layer->overlay, plane, zpos, false);
- 	sun8i_vi_layer_update_formats(mixer, layer->channel,
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-index ccf91f09f..449516859 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
-@@ -8,6 +8,8 @@
- 
- #include <drm/drm_plane.h>
- 
-+#include "sun8i_vi_scaler.h"
-+
- #define SUN8I_MIXER_CHAN_VI_LAYER_ATTR(base, layer) \
- 		((base) + 0x30 * (layer) + 0x0)
- #define SUN8I_MIXER_CHAN_VI_LAYER_SIZE(base, layer) \
-@@ -65,6 +67,8 @@ struct sun8i_vi_layer {
- 	int			overlay;
- 
- 	bool			en_state;
-+
-+	struct sun8i_vis_data   scale;
- };
- 
- static inline struct sun8i_vi_layer *
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
-index 7ba75011a..46c5d22ad 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
-@@ -11,6 +11,8 @@
- 
- #include "sun8i_vi_scaler.h"
- 
-+#include "sun8i_vi_layer.h"
-+
- static const u32 lan3coefftab32_left[480] = {
- 	0x40000000, 0x40fe0000, 0x3ffd0100, 0x3efc0100,
- 	0x3efb0100, 0x3dfa0200, 0x3cf90200, 0x3bf80200,
-@@ -907,7 +909,7 @@ static void sun8i_vi_scaler_set_coeff(struct regmap *map, u32 base,
- 	}
- }
- 
--void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
-+static void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
- {
- 	u32 val, base;
- 
-@@ -923,10 +925,10 @@ void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
- 		     SUN8I_SCALER_VSU_CTRL(base), val);
- }
- 
--void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
--			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
--			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
--			   const struct drm_format_info *format)
-+static void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
-+				  u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				  u32 hscale, u32 vscale, u32 hphase, u32 vphase,
-+				  const struct drm_format_info *format)
- {
- 	u32 chphase, cvphase;
- 	u32 insize, outsize;
-@@ -997,3 +999,50 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
- 	sun8i_vi_scaler_set_coeff(mixer->engine.regs, base,
- 				  hscale, vscale, format);
- }
-+
-+void sun8i_vi_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer)
-+{
-+	if (layer->scale.en) {
-+		layer->scale.en = false;
-+		mixer->scale[layer->channel] = &layer->scale;
-+		mixer->scale_updated = true;
-+	}
-+}
-+
-+void sun8i_vi_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
-+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase,
-+				    const struct drm_format_info *format)
-+{
-+	struct sun8i_vis_data data = {
-+		.en = true,
-+		.src_w = src_w,
-+		.src_h = src_h,
-+		.dst_w = dst_w,
-+		.dst_h = dst_h,
-+		.hscale = hscale,
-+		.vscale = vscale,
-+		.hphase = hphase,
-+		.vphase = vphase,
-+		.format = format,
-+	};
-+
-+	/* Skip expensive register setup if nothing changed, saves ~40uS @ 1.8MHz */
-+	if (!memcmp(&data, &layer->scale, sizeof(data)))
-+		return;
-+
-+	sun8i_vi_scaler_setup(mixer, layer->channel, data.src_w, data.src_h, data.dst_w, data.dst_h,
-+			      data.hscale, data.vscale, data.hphase, data.vphase, data.format);
-+
-+	if (!layer->scale.en) {
-+		mixer->scale[layer->channel] = &layer->scale;
-+		mixer->scale_updated = true;
-+	}
-+
-+	memcpy(&layer->scale, &data, sizeof(data));
-+}
-+
-+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_vis_data *data)
-+{
-+	sun8i_vi_scaler_enable(mixer, layer, data->en);
-+}
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
-index 68f6593b3..6e6401c9a 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
-@@ -69,10 +69,28 @@
- #define SUN50I_SCALER_VSU_ANGLE_SHIFT(x)		(((x) << 16) & 0xF)
- #define SUN50I_SCALER_VSU_ANGLE_OFFSET(x)		((x) & 0xFF)
- 
--void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable);
--void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
--			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
--			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
--			   const struct drm_format_info *format);
-+struct sun8i_vis_data {
-+	bool				en;
-+	u32				src_w;
-+	u32				src_h;
-+	u32				dst_w;
-+	u32				dst_h;
-+	u32				hscale;
-+	u32				vscale;
-+	u32				hphase;
-+	u32				vphase;
-+	const struct drm_format_info	*format;
-+};
-+
-+struct sun8i_vi_layer;
-+
-+void sun8i_vi_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer);
-+
-+void sun8i_vi_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
-+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase,
-+				    const struct drm_format_info *format);
-+
-+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_vis_data *data);
- 
- #endif
--- 
-2.37.2
-
diff --git a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1509-drm-sun4i-sun8i-Keep-VI-scaler-module-always-enable.patch b/patches/kernel/android13-5.15-2023-01/sun4i-drm/1509-drm-sun4i-sun8i-Keep-VI-scaler-module-always-enable.patch
deleted file mode 100644
index cbf4810..0000000
--- a/patches/kernel/android13-5.15-2023-01/sun4i-drm/1509-drm-sun4i-sun8i-Keep-VI-scaler-module-always-enable.patch
+++ /dev/null
@@ -1,29 +0,0 @@
-From df3adcdfb17c6e24a1b9347721a082516fb1ea8f Mon Sep 17 00:00:00 2001
-From: Roman Stratiienko <r.stratiienko@gmail.com>
-Date: Fri, 17 Jun 2022 14:58:39 +0300
-Subject: [PATCH] drm/sun4i: sun8i: Keep VI scaler module always enable
-
-Otherwise screen may occasionally glitch when switching
-the layer from scaled to unscaled mode.
-
-Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
----
- drivers/gpu/drm/sun4i/sun8i_vi_layer.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-index d2526f7e9..2c4a0e4d2 100644
---- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
-@@ -172,7 +172,7 @@ static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, struct sun8i_v
- 	 */
- 	subsampled = format->hsub > 1 || format->vsub > 1;
- 
--	if (insize != outsize || subsampled || hphase || vphase) {
-+	if (insize != outsize || subsampled || hphase || vphase || true) {
- 		unsigned int scanline, required;
- 		struct drm_display_mode *mode;
- 		u32 hscale, vscale, fps;
--- 
-2.37.2
-
-- 
2.39.2

