From 464c319bab9b307cea105cd054e15fe14da4ed83 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Wed, 19 Apr 2023 00:27:58 +0300
Subject: [PATCH] PINEPHONE: Add audio routing

Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 audio/Android.mk   |  30 ++-
 audio/audio_hw.c   | 109 +++++++++-
 audio/call-audio.c | 493 +++++++++++++++++++++++++++++++++++++++++++++
 audio/call-audio.h |  35 ++++
 deploy.sh          |   8 +
 5 files changed, 668 insertions(+), 7 deletions(-)
 create mode 100644 audio/call-audio.c
 create mode 100644 audio/call-audio.h
 create mode 100755 deploy.sh

diff --git a/audio/Android.mk b/audio/Android.mk
index e4636a7..6efc5cc 100644
--- a/audio/Android.mk
+++ b/audio/Android.mk
@@ -36,7 +36,7 @@ LOCAL_PROPRIETARY_MODULE := true
 LOCAL_CFLAGS += -DETC_PATH=\"/vendor/etc/\"
 endif
 
-LOCAL_CFLAGS += -Werror -Wno-error=unused-parameter -Wno-unused-parameter
+LOCAL_CFLAGS += -Werror -Wno-error=unused-parameter -Wno-unused-parameter -Wno-pointer-sign
 
 LOCAL_C_INCLUDES += \
 	external/tinycompress/include \
@@ -46,7 +46,8 @@ LOCAL_C_INCLUDES += \
 	$(call include-path-for, audio-utils)
 
 LOCAL_SRC_FILES := \
-	audio_hw.c
+	audio_hw.c \
+	call-audio.c \
 
 LOCAL_STATIC_LIBRARIES := \
 	libmedia_helper
@@ -78,4 +79,29 @@ endif
 
 include $(BUILD_SHARED_LIBRARY)
 
+include $(CLEAR_VARS)
+
+LOCAL_CFLAGS += -Werror -Wno-error=unused-parameter -Wno-unused-parameter -Wno-pointer-sign
+
+LOCAL_SHARED_LIBRARIES := \
+	libcutils \
+	libutils \
+	libdl	\
+	liblog	\
+	libhardware \
+	libtinyalsav2	\
+	libtinycompress	\
+	libaudiohalcm \
+	libaudioutils \
+	libsysutils
+
+LOCAL_VENDOR_MODULE := true
+
+LOCAL_MODULE := callaudio
+
+LOCAL_SRC_FILES := \
+	call-audio.c \
+
+include $(BUILD_EXECUTABLE)
+
 endif
diff --git a/audio/audio_hw.c b/audio/audio_hw.c
index 3aa24b0..6c33700 100644
--- a/audio/audio_hw.c
+++ b/audio/audio_hw.c
@@ -59,6 +59,74 @@
 #include <vendor/cirrus/scchal/scc_audio.h>
 #endif
 
+#include "call-audio.h"
+
+static struct audio_setup audio_setup = {
+	.mic_on = false,
+	.ear_on = false,
+	.spk_on = false,
+	.hp_on = false,
+	.hpmic_on = false,
+
+	.from_modem_on = true,
+	.from_modem_vol = 0, /* Experiment results: 0-80 - mute, 80-160 - volume */
+	.to_modem_on = true,
+
+	.modem_playback_monitor = false,
+
+	.dai2_en = false,
+
+	.hp_vol = 63, /* 100% */
+	.spk_vol = 31, /* 100% */
+	.ear_vol = 31, /* 100% */
+	.mic_gain = 1,
+	.hpmic_gain = 1,
+};
+
+#define APPLY_SETUP() audio_set_controls(&audio_setup);
+
+static void apply_route_pp(audio_devices_t dev) {
+    if (dev == AUDIO_DEVICE_OUT_SPEAKER) {
+        ALOGD("apply_route_pp: AUDIO_DEVICE_OUT_SPEAKER");
+        audio_setup.mic_on = true;
+        audio_setup.hpmic_on = false;
+
+        audio_setup.spk_on = true;
+        audio_setup.hp_on = false;
+        audio_setup.ear_on = false;
+    } else if (dev == AUDIO_DEVICE_OUT_WIRED_HEADSET) {
+        ALOGD("apply_route_pp: AUDIO_DEVICE_OUT_WIRED_HEADSET");
+        audio_setup.mic_on = false;
+        audio_setup.hpmic_on = true;
+
+        audio_setup.spk_on = false;
+        audio_setup.hp_on = true;
+        audio_setup.ear_on = false;
+    } else if (dev == AUDIO_DEVICE_OUT_WIRED_HEADPHONE) {
+        ALOGD("apply_route_pp: AUDIO_DEVICE_OUT_WIRED_HEADPHONE");
+        audio_setup.mic_on = true;
+        audio_setup.hpmic_on = false;
+
+        audio_setup.spk_on = false;
+        audio_setup.hp_on = true;
+        audio_setup.ear_on = false;
+    } else if (dev == AUDIO_DEVICE_OUT_EARPIECE) {
+        ALOGD("apply_route_pp: AUDIO_DEVICE_OUT_EARPIECE");
+        audio_setup.mic_on = true;
+        audio_setup.hpmic_on = false;
+
+        audio_setup.spk_on = false;
+        audio_setup.hp_on = false;
+        audio_setup.ear_on = true;
+    } else {
+        ALOGD("apply_route_pp: default (%d)", dev);
+        audio_setup.spk_on = false;
+        audio_setup.hp_on = false;
+        audio_setup.ear_on = false;
+    }
+    APPLY_SETUP();
+}
+
 /* These values are defined in _frames_ (not bytes) to match the ALSA API */
 #define OUT_PERIOD_SIZE_DEFAULT 256
 #define OUT_PERIOD_COUNT_DEFAULT 4
@@ -375,7 +443,7 @@ static int out_dump(const struct audio_stream *stream, int fd)
 
 static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
 {
-    ALOGV("+out_set_parameters(%p) '%s'", stream, kvpairs);
+    ALOGD("+out_set_parameters(%p) '%s'", stream, kvpairs);
 
     struct stream_out_common *out = (struct stream_out_common *)stream;
     struct audio_device *adev = out->dev;
@@ -387,7 +455,7 @@ static int out_set_parameters(struct audio_stream *stream, const char *kvpairs)
     pthread_mutex_lock(&adev->lock);
 
     if (ret >= 0) {
-        apply_route(out->hw, v);
+        apply_route_pp(v);
     }
 
     stream_invoke_usecases(out->hw, kvpairs);
@@ -642,7 +710,7 @@ static int do_init_out_common(struct stream_out_common *out,
     out->frame_size = audio_stream_frame_size(&out->stream.common);
 #endif
     /* Apply initial route */
-    apply_route(out->hw, devices);
+    apply_route_pp(devices);
 
     return 0;
 }
@@ -2055,7 +2123,7 @@ static int in_pcm_set_parameters(struct audio_stream *stream, const char *kvpair
     bool input_was_changed;
     int ret;
 
-    ALOGV("+in_pcm_set_parameters(%p) '%s'", stream, kvpairs);
+    ALOGD("+in_pcm_set_parameters(%p) '%s'", stream, kvpairs);
 
     ret = common_get_routing_param(&new_routing, kvpairs);
     routing_changed = (ret >= 0);
@@ -2352,7 +2420,7 @@ static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
     char *str;
     char value[32];
 
-    ALOGW("adev_set_parameters '%s'", kvpairs);
+    ALOGD("adev_set_parameters '%s'", kvpairs);
 
     if (adev->global_stream != NULL) {
         stream_invoke_usecases(adev->global_stream, kvpairs);
@@ -2374,16 +2442,43 @@ static int adev_init_check(const struct audio_hw_device *dev)
 
 static int adev_set_voice_volume(struct audio_hw_device *dev, float volume)
 {
+    ALOGD("adev_set_voice_volume %f", volume);
+
+    audio_setup.from_modem_vol = (volume == 0) ? 0 : 80 + (int)(volume * 80);
+    APPLY_SETUP();
+
     return 0;
 }
 
 static int adev_set_master_volume(struct audio_hw_device *dev, float volume)
 {
+    ALOGW("adev_set_master_volume %f", volume);
     return -ENOSYS;
 }
 
 static int adev_set_mode(struct audio_hw_device *dev, audio_mode_t mode)
 {
+    switch (mode) {
+    case AUDIO_MODE_NORMAL:
+        ALOGI("adev_set_mode: AUDIO_MODE_NORMAL");
+        break;
+    case AUDIO_MODE_RINGTONE:
+        ALOGI("adev_set_mode: AUDIO_MODE_RINGTONE");
+        break;
+    case AUDIO_MODE_IN_CALL:
+        ALOGI("adev_set_mode: AUDIO_MODE_IN_CALL");
+        break;
+    case AUDIO_MODE_IN_COMMUNICATION:
+        ALOGI("adev_set_mode: AUDIO_MODE_IN_COMMUNICATION");
+        break;
+    default:
+        ALOGI("adev_set_mode: unknown mode %d", mode);
+        break;
+    };
+
+    audio_setup.dai2_en = (mode == AUDIO_MODE_IN_CALL);
+    APPLY_SETUP();
+
     return 0;
 }
 
@@ -2391,7 +2486,11 @@ static int adev_set_mic_mute(struct audio_hw_device *dev, bool state)
 {
     struct audio_device *adev = (struct audio_device *)dev;
 
+    ALOGD("adev_set_mic_mute %d", state);
+
     adev->mic_mute = state;
+    audio_setup.to_modem_on = !state;
+    APPLY_SETUP();
 
     return 0;
 }
diff --git a/audio/call-audio.c b/audio/call-audio.c
new file mode 100644
index 0000000..13bb2fe
--- /dev/null
+++ b/audio/call-audio.c
@@ -0,0 +1,493 @@
+/*
+ * Voice call audio setup tool
+ *
+ * Copyright (C) 2020  Ond≈ôej Jirman <megous@megous.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * 2020-09-29: Updated for the new Samuel's digital codec driver
+ */
+
+#include <assert.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdarg.h>
+#include <stdint.h>
+#include <string.h>
+#include <errno.h>
+#include <unistd.h>
+#include <inttypes.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+
+#include <sound/asound.h>
+#include <sound/tlv.h>
+
+#include "call-audio.h"
+
+#define ARRAY_SIZE(a) (sizeof((a)) / sizeof((a)[0]))
+
+void syscall_error(int is_err, const char* fmt, ...)
+{
+	va_list ap;
+
+	if (!is_err)
+		return;
+
+	printf("ERROR: ");
+	va_start(ap, fmt);
+	vprintf(fmt, ap);
+	va_end(ap);
+	printf(": %s\n", strerror(errno));
+
+	exit(1);
+}
+
+void error(const char* fmt, ...)
+{
+	va_list ap;
+
+	printf("ERROR: ");
+	va_start(ap, fmt);
+	vprintf(fmt, ap);
+	va_end(ap);
+	printf("\n");
+
+	exit(1);
+}
+
+struct audio_control_state {
+	char name[128];
+	union {
+		int64_t i[4];
+		const char* e[4];
+	} vals;
+	bool used;
+};
+
+static int open_card(void)
+{
+	int ret, fd;
+
+	for (int i = 0; i < 5; i++) {
+		char path[256];
+		snprintf(path, sizeof path, "/dev/snd/controlC%d", i);
+
+		fd = open(path, O_CLOEXEC | O_NONBLOCK);
+		if (fd < 0) {
+			if (errno == ENOENT)
+				continue;
+
+			error("failed to open card %s (%s)\n", path, strerror(errno));
+		}
+
+		struct snd_ctl_card_info ci = {};
+		ret = ioctl(fd, SNDRV_CTL_IOCTL_CARD_INFO, &ci);
+		syscall_error(ret < 0, "SNDRV_CTL_IOCTL_CARD_INFO failed");
+
+		//printf("Trying card %s (driver: %s)\n", ci.name, ci.driver);
+
+		if (!strcasecmp(ci.name, "PinePhone"))
+			return fd;
+
+		close(fd);
+	}
+
+	error("PinePhone audio card was not found!\n");
+	return -1;
+}
+
+static bool audio_restore_state(struct audio_control_state* controls, int n_controls)
+{
+	int fd;
+	int ret;
+
+	fd = open_card();
+
+	struct snd_ctl_elem_list el = {
+		.offset = 0,
+		.space = 0,
+	};
+	ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &el);
+	syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_LIST failed");
+
+	struct snd_ctl_elem_id ids[el.count];
+	el.pids = ids;
+	el.space = el.count;
+	ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &el);
+	syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_LIST failed");
+
+	for (int i = 0; i < el.used; i++) {
+		struct snd_ctl_elem_info inf = {
+			.id = ids[i],
+		};
+
+		ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &inf);
+		syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_INFO failed");
+
+		if ((inf.access & SNDRV_CTL_ELEM_ACCESS_READ) && (inf.access & SNDRV_CTL_ELEM_ACCESS_WRITE)) {
+			struct snd_ctl_elem_value val = {
+				.id = ids[i],
+			};
+			int64_t cval = 0;
+
+			ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_READ, &val);
+			syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_READ failed");
+
+			struct audio_control_state* cs = NULL;
+			for (int j = 0; j < n_controls; j++) {
+				if (!strcmp(controls[j].name, ids[i].name)) {
+					cs = &controls[j];
+					break;
+				}
+			}
+
+			if (!cs) {
+				printf("Control \"%s\" si not defined in the controls state\n", ids[i].name);
+				continue;
+			}
+
+			cs->used = 1;
+
+			// check if value needs changing
+
+			switch (inf.type) {
+			case SNDRV_CTL_ELEM_TYPE_BOOLEAN:
+			case SNDRV_CTL_ELEM_TYPE_INTEGER:
+				for (int j = 0; j < inf.count; j++) {
+					if (cs->vals.i[j] != val.value.integer.value[j]) {
+						// update
+						//printf("%s <=[%d]= %"PRIi64"\n", ids[i].name, j, cs->vals.i[j]);
+
+						val.value.integer.value[j] = cs->vals.i[j];
+						ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &val);
+						syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_WRITE failed");
+					}
+				}
+
+				break;
+			case SNDRV_CTL_ELEM_TYPE_INTEGER64:
+				for (int j = 0; j < inf.count; j++) {
+					if (cs->vals.i[j] != val.value.integer64.value[j]) {
+						// update
+						//printf("%s <=[%d]= %"PRIi64"\n", ids[i].name, j, cs->vals.i[j]);
+
+						val.value.integer64.value[j] = cs->vals.i[j];
+						ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &val);
+						syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_WRITE failed");
+					}
+				}
+
+				break;
+
+			case SNDRV_CTL_ELEM_TYPE_ENUMERATED: {
+				for (int k = 0; k < inf.count; k++) {
+					int eval = -1;
+					for (int j = 0; j < inf.value.enumerated.items; j++) {
+						inf.value.enumerated.item = j;
+
+						ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &inf);
+						syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_INFO failed");
+
+						if (!strcmp(cs->vals.e[k], inf.value.enumerated.name)) {
+							eval = j;
+							break;
+						}
+					}
+
+					if (eval < 0)
+						error("enum value %s not found\n", cs->vals.e[k]);
+
+					if (eval != val.value.enumerated.item[k]) {
+						// update
+						//printf("%s <=%d= %s\n", ids[i].name, k, cs->vals.e[k]);
+
+						val.value.enumerated.item[k] = eval;
+						ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &val);
+						syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_WRITE failed");
+					}
+				}
+
+				break;
+			}
+			}
+		}
+	}
+
+	for (int j = 0; j < n_controls; j++)
+		if (!controls[j].used)
+			printf("Control \"%s\" is defined in state but not present on the card\n", controls[j].name);
+
+	close(fd);
+	return true;
+}
+
+void audio_set_controls(struct audio_setup* s)
+{
+	struct audio_control_state controls[] = {
+		//
+                // Analog input:
+		//
+
+		// Mic 1 (daughterboard)
+		{ .name = "Mic1 Boost Volume",                              .vals.i = { s->mic_gain } },
+
+		// Mic 2 (headphones)
+		{ .name = "Mic2 Boost Volume",                              .vals.i = { s->hpmic_gain } },
+
+		// Line in (unused on PP)
+		// no controls yet
+
+                // Input mixers before ADC
+
+		{ .name = "Mic1 Capture Switch",                            .vals.i = { !!s->mic_on, !!s->mic_on } },
+		{ .name = "Mic2 Capture Switch",                            .vals.i = { !!s->hpmic_on, !!s->hpmic_on } },
+		{ .name = "Line In Capture Switch",                         .vals.i = { 0, 0 } }, // Out Mix -> In Mix
+		{ .name = "Mixer Capture Switch",                           .vals.i = { 0, 0 } },
+		{ .name = "Mixer Reversed Capture Switch",                  .vals.i = { 0, 0 } },
+
+		// ADC
+		{ .name = "ADC Gain Capture Volume",                        .vals.i = { 0 } },
+		{ .name = "ADC Capture Volume",                             .vals.i = { 160, 160 } }, // digital gain
+
+		//
+                // Digital paths:
+		//
+
+		// AIF1 (SoC)
+
+		// AIF1 slot0 capture mixer sources
+		{ .name = "AIF1 Data Digital ADC Capture Switch",           .vals.i = { 1, 0 } },
+		{ .name = "AIF1 Slot 0 Digital ADC Capture Switch",         .vals.i = { 0, 0 } },
+		{ .name = "AIF2 Digital ADC Capture Switch",                .vals.i = { 0, 1 } },
+		{ .name = "AIF2 Inv Digital ADC Capture Switch",            .vals.i = { 0, 0 } }, //XXX: capture right from the left AIF2?
+
+		// AIF1 slot0 capture/playback mono mixing/digital volume
+		{ .name = "AIF1 AD0 Capture Volume",                        .vals.i = { 160, 160 } },
+		{ .name = "AIF1 AD0 Stereo Capture Route",                  .vals.e = { "Stereo", "Stereo" } },
+		{ .name = "AIF1 DA0 Playback Volume",                       .vals.i = { 160, 160 } },
+		{ .name = "AIF1 DA0 Stereo Playback Route",                 .vals.e = { "Stereo", "Stereo" } },
+
+		// AIF2 (modem)
+
+		// AIF2 capture mixer sources
+		{ .name = "AIF2 ADC Mixer ADC Capture Switch",              .vals.i = { !!s->to_modem_on && !!s->dai2_en, 0 } }, // from adc/mic
+		{ .name = "AIF2 ADC Mixer AIF1 DA0 Capture Switch",         .vals.i = { 0, 1 } }, // from aif1 R
+		{ .name = "AIF2 ADC Mixer AIF2 DAC Rev Capture Switch",     .vals.i = { 0, 0 } },
+
+		// AIF2 capture/playback mono mixing/digital volume
+		{ .name = "AIF2 ADC Capture Volume",                        .vals.i = { 160, 160 } },
+		{ .name = "AIF2 DAC Playback Volume",                       .vals.i = { s->from_modem_vol, s->from_modem_vol } },
+		{ .name = "AIF2 ADC Stereo Capture Route",                  .vals.e = { "Mix Mono", "Mix Mono" } }, // we mix because we're sending two channels (from mic and AIF1 R)
+		{ .name = "AIF2 DAC Stereo Playback Route",                 .vals.e = { "Sum Mono", "Sum Mono" } },  // we sum because modem is sending a single channel
+
+                // AIF3 (bluetooth)
+
+		{ .name = "AIF3 ADC Source Capture Route",                  .vals.e = { "None" } },
+		{ .name = "AIF2 DAC Source Playback Route",                 .vals.e = { "AIF2" } },
+
+		// DAC
+
+		// DAC input mixers (sources from ADC, and AIF1/2)
+		{ .name = "ADC Digital DAC Playback Switch",                .vals.i = { 0, 0 } }, // we don't play our mic to ourselves
+		{ .name = "AIF1 Slot 0 Digital DAC Playback Switch",        .vals.i = { 1, !!s->modem_playback_monitor } },
+		{ .name = "AIF2 Digital DAC Playback Switch",               .vals.i = { 0, !!s->dai2_en && !!s->from_modem_on } },
+
+		//
+		// Analog output:
+		//
+
+		// Output mixer after DAC
+
+		{ .name = "DAC Playback Switch",                            .vals.i = { 1, 1 } },
+		{ .name = "DAC Reversed Playback Switch",                   .vals.i = { 1, 1 } },
+		{ .name = "DAC Playback Volume",                            .vals.i = { 160, 160 } },
+		{ .name = "Mic1 Playback Switch",                           .vals.i = { 0, 0 } },
+		{ .name = "Mic1 Playback Volume",                           .vals.i = { 0 } },
+		{ .name = "Mic2 Playback Switch",                           .vals.i = { 0, 0 } },
+		{ .name = "Mic2 Playback Volume",                           .vals.i = { 0 } },
+		{ .name = "Line In Playback Switch",                        .vals.i = { 0, 0 } },
+		{ .name = "Line In Playback Volume",                        .vals.i = { 0 } },
+
+                // Outputs
+
+		{ .name = "Earpiece Source Playback Route",		    .vals.e = { "Left Mixer" } },
+		{ .name = "Earpiece Playback Switch",                       .vals.i = { !!s->ear_on } },
+		{ .name = "Earpiece Playback Volume",                       .vals.i = { s->ear_vol } },
+
+		{ .name = "Headphone Source Playback Route",                .vals.e = { "Mixer", "Mixer" } },
+		{ .name = "Headphone Playback Switch",                      .vals.i = { !!s->hp_on, !!s->hp_on } },
+		{ .name = "Headphone Playback Volume",                      .vals.i = { s->hp_vol } },
+
+		// Loudspeaker
+		{ .name = "Line Out Source Playback Route",                 .vals.e = { "Mono Differential", "Mono Differential" } },
+		{ .name = "Line Out Playback Switch",                       .vals.i = { !!s->spk_on, !!s->spk_on } },
+		{ .name = "Line Out Playback Volume",                       .vals.i = { s->spk_vol } },
+	};
+
+	audio_restore_state(controls, ARRAY_SIZE(controls));
+}
+
+static struct audio_setup audio_setup = {
+	.mic_on = false,
+	.ear_on = false,
+	.spk_on = false,
+	.hp_on = false,
+	.hpmic_on = false,
+
+	.from_modem_on = true,
+	.to_modem_on = true,
+	.modem_playback_monitor = false,
+
+	.dai2_en = false,
+
+	.hp_vol = 15,
+	.spk_vol = 15,
+	.ear_vol = 31,
+	.mic_gain = 1,
+	.hpmic_gain = 1,
+};
+
+void audio_dump_state(void)
+{
+	int fd;
+	int ret;
+
+	fd = open("/dev/snd/controlC0", O_CLOEXEC | O_NONBLOCK);
+	if (fd < 0)
+		error("failed to open card\n");
+
+	struct snd_ctl_card_info ci;
+	ret = ioctl(fd, SNDRV_CTL_IOCTL_CARD_INFO, &ci);
+	syscall_error(ret < 0, "SNDRV_CTL_IOCTL_CARD_INFO failed");
+	printf("// card %d [%s]\n", ci.card, ci.longname);
+	printf("struct audio_control_state state_xxx[] = {\n");
+
+	struct snd_ctl_elem_list el = {
+		.offset = 0,
+		.space = 0,
+	};
+	ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &el);
+	syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_LIST failed");
+
+	struct snd_ctl_elem_id ids[el.count];
+	el.pids = ids;
+	el.space = el.count;
+	ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_LIST, &el);
+	syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_LIST failed");
+
+	for (int i = 0; i < el.used; i++) {
+		struct snd_ctl_elem_info inf = {
+			.id = ids[i],
+		};
+
+		ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &inf);
+		syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_INFO failed");
+
+		struct snd_ctl_elem_value val = {
+			.id = ids[i],
+		};
+
+		if ((inf.access & SNDRV_CTL_ELEM_ACCESS_READ) && (inf.access & SNDRV_CTL_ELEM_ACCESS_WRITE)) {
+			ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_READ, &val);
+			syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_READ failed");
+			int64_t cval = 0;
+			char buf[256];
+
+			snprintf(buf, sizeof buf, "\"%s\",", ids[i].name);
+			switch (inf.type) {
+			case SNDRV_CTL_ELEM_TYPE_BOOLEAN:
+			case SNDRV_CTL_ELEM_TYPE_INTEGER:
+			case SNDRV_CTL_ELEM_TYPE_INTEGER64:
+			case SNDRV_CTL_ELEM_TYPE_ENUMERATED:
+				break;
+			default:
+				continue;
+			}
+
+			printf("\t{ .name = %-50s", buf);
+
+			switch (inf.type) {
+			case SNDRV_CTL_ELEM_TYPE_BOOLEAN:
+			case SNDRV_CTL_ELEM_TYPE_INTEGER:
+				printf(".vals.i = {");
+				for (int j = 0; j < inf.count; j++)
+					printf(" %ld%s", val.value.integer.value[j], j + 1 == inf.count ? "" : ",");
+				printf(" } },\n");
+				break;
+
+			case SNDRV_CTL_ELEM_TYPE_INTEGER64:
+				printf(".vals.i = {");
+				for (int j = 0; j < inf.count; j++)
+					printf(" %lld%s", val.value.integer64.value[j], j + 1 == inf.count ? "" : ",");
+				printf(" } },\n");
+				break;
+
+			case SNDRV_CTL_ELEM_TYPE_ENUMERATED:
+				printf(".vals.e = {");
+				for (int j = 0; j < inf.count; j++) {
+					inf.value.enumerated.item = val.value.enumerated.item[j];
+					ret = ioctl(fd, SNDRV_CTL_IOCTL_ELEM_INFO, &inf);
+					syscall_error(ret < 0, "SNDRV_CTL_IOCTL_ELEM_INFO failed");
+
+					printf(" \"%s\"%s", inf.value.enumerated.name, j + 1 == inf.count ? "" : ",");
+				}
+				printf(" } },\n");
+				break;
+			}
+		}
+	}
+
+	printf("};\n");
+
+	close(fd);
+}
+
+int main(int ac, char* av[])
+{
+	int opt;
+
+	while ((opt = getopt(ac, av, "smhle2d")) != -1) {
+		switch (opt) {
+		case 'd':
+			audio_dump_state();
+			return 0;
+		case 's':
+			audio_setup.spk_on = 1;
+			break;
+		case 'm':
+			audio_setup.mic_on = 1;
+			break;
+		case 'h':
+			audio_setup.hp_on = 1;
+			break;
+		case 'l':
+			audio_setup.hpmic_on = 1;
+			break;
+		case 'e':
+			audio_setup.ear_on = 1;
+			break;
+		case '2':
+			audio_setup.dai2_en = 1;
+			break;
+		default: /* '?' */
+			fprintf(stderr, "Usage: %s [-s] [-m] [-h] [-l] [-e] [-2]\n", av[0]);
+			exit(EXIT_FAILURE);
+		}
+	}
+
+	audio_set_controls(&audio_setup);
+	return 0;
+}
diff --git a/audio/call-audio.h b/audio/call-audio.h
new file mode 100644
index 0000000..6fec44d
--- /dev/null
+++ b/audio/call-audio.h
@@ -0,0 +1,35 @@
+#pragma once
+
+struct audio_setup {
+	bool mic_on;
+	bool spk_on;
+	bool hp_on;
+	bool ear_on;
+	bool hpmic_on;
+
+	// when sending audio to modem from AIF1 R, also play that back
+	// to me locally (just like AIF1 L plays just to me)
+	//
+	// this is to monitor what SW is playing to the modem (so that
+	// I can hear my robocaller talking)
+	bool modem_playback_monitor;
+
+	// enable modem routes to DAC/from ADC (spk/mic)
+	// digital paths to AIF1 are always on
+	bool to_modem_on;
+	bool from_modem_on;
+
+	int from_modem_vol;
+
+	// shut off/enable all digital paths to the modem:
+	// keep this off until the call starts, then turn it on
+	bool dai2_en;
+
+	int mic_gain;
+	int hpmic_gain;
+	int spk_vol;
+	int ear_vol;
+	int hp_vol;
+};
+
+void audio_set_controls(struct audio_setup* s);
diff --git a/deploy.sh b/deploy.sh
new file mode 100755
index 0000000..ba690aa
--- /dev/null
+++ b/deploy.sh
@@ -0,0 +1,8 @@
+#!/bin/bash -e
+
+adb root && adb remount && adb sync vendor
+
+adb logcat -c
+adb shell stop audioserver
+adb shell start audioserver
+adb logcat | grep -i tiny
-- 
2.37.2

