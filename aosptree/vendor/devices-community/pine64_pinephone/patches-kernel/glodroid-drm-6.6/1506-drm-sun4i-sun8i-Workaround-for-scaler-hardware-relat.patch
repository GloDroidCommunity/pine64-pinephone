From c07dc4a86d84551842f67d192d014e3a022f22ff Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Fri, 10 Jun 2022 19:34:39 +0300
Subject: [PATCH] drm/sun4i: sun8i: Workaround for scaler hardware-related
 issues
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

[Problem]
Mainline drm/sun4i DE2 and DE3 always had problems with scaling:
Anytime when a user changes scale ratio on-screen glitches appear and in
some cases the whole pipeline can freeze which requires system restart.

Users who can benefit from scale-based animation have to disable
hardware acceleration and use GPU for such cases which affects
performance.

[Investigation]
I noticed that the top part of the screen usually does not have any
glitches while after "ray" passes some vertical line glitches start
to appear. Later-on I discovered that a glitch appeared once a new
commit was sent to the DRM and the vertical line that splits the screen
into top and bottom half depends on the time offset commit was sent.

All this guided me to the set of scaler hardware registers that for some
reason does not wait for VSYNC edge and instead is used by hardware
immediately after being set.

Broken registers can be easily probed using devmem.
To do that first we must prepare some scale-containing commit and keep it
on the screen. Then using devmem tool change register values. In case
something changes on the screen, the register has a double-buffering issue.
If change can be seen only after storing 1 into the mixer.dbuff register,
then the register doesn't have a double buffering issue.

Using the method described above the following broken register set was
discovered:

 - VSU.CTRL.EN

 - UIS.CTRL.EN
 - UIS.OUTSIZE
 - UIS.INSIZE
 - UIS.HSTEP
 - UIS.VSTEP
 - UIS.HPHASE
 - UIS.VPHASE0

The only solution (to be precise - workaround) that I can see as far is
to set these registers during VBLANK.

[Challenges]
1.a. VBLANK interrupt can be temporarily disabled. This situation can
     occur when a lot of serial console dmesg output are pending.
1.b. VBLANK interrupt can be delayed while CPU is handling another
     interrupt.
1.c. VBLANK duration can be smaller than required due to small display
     mode vporch values

2.a. Difference between UIS[ch].OutSize and BLD[z].InSize can cause
     pipeline freeze.
2.b. UIS[ch].OutSize is set once the register is updated while
     BLD[z].InSize is latched on vsync negative edge.

3.a. Race conditions can occur when VSYNC finishes before we set all the
     registers.

[Conclusion]
There is no reliable solution for this problem. But there is a workaround
that can eliminate pipeline freeze cases and can significantly reduce
screen glitches, which is enough to enable scale-based animations in
most of cases.

Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 drivers/gpu/drm/sun4i/sun4i_tcon.c      |   6 +-
 drivers/gpu/drm/sun4i/sun8i_mixer.c     | 116 +++++++++++++++++++++++-
 drivers/gpu/drm/sun4i/sun8i_mixer.h     |  11 +++
 drivers/gpu/drm/sun4i/sun8i_ui_layer.c  |  36 ++++----
 drivers/gpu/drm/sun4i/sun8i_ui_layer.h  |   3 +
 drivers/gpu/drm/sun4i/sun8i_ui_scaler.c |  85 ++++++++++++++---
 drivers/gpu/drm/sun4i/sun8i_ui_scaler.h |  24 ++++-
 drivers/gpu/drm/sun4i/sun8i_vi_layer.c  |  16 ++--
 drivers/gpu/drm/sun4i/sun8i_vi_layer.h  |   4 +
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.c |  59 +++++++++++-
 drivers/gpu/drm/sun4i/sun8i_vi_scaler.h |  28 +++++-
 11 files changed, 329 insertions(+), 59 deletions(-)

diff --git a/drivers/gpu/drm/sun4i/sun4i_tcon.c b/drivers/gpu/drm/sun4i/sun4i_tcon.c
index a431e093c5f7..1a296eeff187 100644
--- a/drivers/gpu/drm/sun4i/sun4i_tcon.c
+++ b/drivers/gpu/drm/sun4i/sun4i_tcon.c
@@ -797,6 +797,9 @@ static irqreturn_t sun4i_tcon_handler(int irq, void *private)
 			SUN4I_TCON_GINT0_TCON0_TRI_FINISH_INT)))
 		return IRQ_NONE;
 
+	if (engine->ops->vblank_quirk)
+		engine->ops->vblank_quirk(engine);
+
 	drm_crtc_handle_vblank(&scrtc->crtc);
 	sun4i_tcon_finish_page_flip(drm, scrtc);
 
@@ -807,9 +810,6 @@ static irqreturn_t sun4i_tcon_handler(int irq, void *private)
 			   SUN4I_TCON_GINT0_TCON0_TRI_FINISH_INT,
 			   0);
 
-	if (engine->ops->vblank_quirk)
-		engine->ops->vblank_quirk(engine);
-
 	return IRQ_HANDLED;
 }
 
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.c b/drivers/gpu/drm/sun4i/sun8i_mixer.c
index 0aee68e81003..b8375ad9b5da 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.c
@@ -249,12 +249,81 @@ int sun8i_mixer_drm_format_to_hw(u32 format, u32 *hw_format)
 	return -EINVAL;
 }
 
+static void sun8i_set_dbuff_active(struct sunxi_engine *engine)
+{
+	u32 reg;
+
+	regmap_read(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, &reg);
+	if (reg & SUN8I_MIXER_GLOBAL_DBUFF_ENABLE) /* Already raised */
+		return;
+
+	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
+}
+
+static void sun8i_scaler_regs_update(struct sunxi_engine *engine)
+{
+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
+	int layer;
+
+	for (layer = 0; layer < SUN8I_MAX_LAYERS; layer++) {
+		if (!mixer->scale[layer])
+			continue;
+
+		if (layer < mixer->cfg->vi_num)
+			sun8i_vi_scaler_apply(mixer, layer,
+					      (struct sun8i_vis_data *)mixer->scale[layer]);
+		else
+			sun8i_ui_scaler_apply(mixer, layer,
+					      (struct sun8i_uis_data *)mixer->scale[layer]);
+
+		mixer->scale[layer] = 0;
+	}
+
+	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
+
+	mixer->scale_update_staged = false;
+	mixer->scale_updated = false;
+}
+
+static void sun8i_atomic_begin(struct sunxi_engine *engine,
+			       struct drm_crtc_state *old_state)
+{
+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
+	u32 reg;
+	int ret;
+
+	ret = regmap_read_poll_timeout(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF, reg,
+				       !(reg & SUN8I_MIXER_GLOBAL_DBUFF_ENABLE) &&
+				       !READ_ONCE(mixer->scale_updated), 1000, 50000);
+}
+
+static void sun8i_vblank_handler(struct sunxi_engine *engine)
+{
+	struct sun8i_mixer *mixer = engine_to_sun8i_mixer(engine);
+
+	if (mixer->has_irq || !mixer->scale_update_staged)
+		return;
+
+	sun8i_scaler_regs_update(engine);
+}
+
 static void sun8i_mixer_commit(struct sunxi_engine *engine)
 {
+	struct sun8i_mixer* mixer = engine_to_sun8i_mixer(engine);
+
 	DRM_DEBUG_DRIVER("Committing changes\n");
 
-	regmap_write(engine->regs, SUN8I_MIXER_GLOBAL_DBUFF,
-		     SUN8I_MIXER_GLOBAL_DBUFF_ENABLE);
+	if (mixer->scale_updated) {
+		mixer->scale_update_staged = true;
+		if (!mixer->has_irq)
+			return;
+
+		regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_CTL,
+				   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN,
+				   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN);
+	} else {
+		sun8i_set_dbuff_active(engine);
+	}
 }
 
 static struct drm_plane **sun8i_layers_init(struct drm_device *drm,
@@ -325,14 +394,18 @@ static void sun8i_mixer_mode_set(struct sunxi_engine *engine,
 
 	regmap_write(engine->regs, SUN8I_MIXER_BLEND_OUTCTL(bld_base), val);
 
+	sun8i_set_dbuff_active(engine);
+
 	DRM_DEBUG_DRIVER("Switching display mixer interlaced mode %s\n",
 			 interlaced ? "on" : "off");
 }
 
 static const struct sunxi_engine_ops sun8i_engine_ops = {
+	.atomic_begin	= sun8i_atomic_begin,
 	.commit		= sun8i_mixer_commit,
 	.layers_init	= sun8i_layers_init,
 	.mode_set	= sun8i_mixer_mode_set,
+	.vblank_quirk   = sun8i_vblank_handler,
 };
 
 static const struct regmap_config sun8i_mixer_regmap_config = {
@@ -362,6 +435,31 @@ static int sun8i_mixer_of_get_id(struct device_node *node)
 	return of_ep.id;
 }
 
+static irqreturn_t sun8i_mixer_handler(int irq, void *private)
+{
+	struct sun8i_mixer *mixer = private;
+	struct sunxi_engine *engine = &mixer->engine;
+
+	unsigned int status;
+
+	regmap_read(engine->regs, SUN8I_MIXER_GLOBAL_STATUS, &status);
+
+	if (!(status & SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS))
+		return IRQ_NONE;
+
+	sun8i_scaler_regs_update(engine);
+
+	/* Acknowledge the interrupt */
+	regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_STATUS,
+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS,
+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS);
+
+	regmap_update_bits(engine->regs, SUN8I_MIXER_GLOBAL_CTL,
+			   SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN, 0);
+
+	return IRQ_HANDLED;
+}
+
 static int sun8i_mixer_bind(struct device *dev, struct device *master,
 			      void *data)
 {
@@ -372,7 +470,7 @@ static int sun8i_mixer_bind(struct device *dev, struct device *master,
 	void __iomem *regs;
 	unsigned int base;
 	int plane_cnt;
-	int i, ret;
+	int i, ret, irq;
 
 	/*
 	 * The mixer uses single 32-bit register to store memory
@@ -444,6 +542,18 @@ static int sun8i_mixer_bind(struct device *dev, struct device *master,
 		return ret;
 	}
 
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_warn(dev, "Couldn't find the IRQ\n");
+	} else {
+		ret = devm_request_irq(dev, irq, sun8i_mixer_handler,
+				       IRQF_SHARED, dev_name(dev), mixer);
+		if (ret)
+			dev_warn(dev, "Couldn't request the IRQ\n");
+		else
+			mixer->has_irq = true;
+	}
+
 	mixer->bus_clk = devm_clk_get(dev, "bus");
 	if (IS_ERR(mixer->bus_clk)) {
 		dev_err(dev, "Couldn't get the mixer bus clock\n");
diff --git a/drivers/gpu/drm/sun4i/sun8i_mixer.h b/drivers/gpu/drm/sun4i/sun8i_mixer.h
index 42a6a6daea0e..0c2c4bc76b54 100644
--- a/drivers/gpu/drm/sun4i/sun8i_mixer.h
+++ b/drivers/gpu/drm/sun4i/sun8i_mixer.h
@@ -21,6 +21,10 @@
 #define SUN8I_MIXER_GLOBAL_SIZE			0xc
 
 #define SUN8I_MIXER_GLOBAL_CTL_RT_EN		BIT(0)
+#define SUN8I_MIXER_GLOBAL_FINISH_IRQ_EN	BIT(4)
+
+#define SUN8I_MIXER_GLOBAL_FINISH_IRQ_STATUS	BIT(0)
+#define SUN8I_MIXER_GLOBAL_BUSY_STATUS		BIT(4)
 
 #define SUN8I_MIXER_GLOBAL_DBUFF_ENABLE		BIT(0)
 
@@ -153,6 +157,8 @@ enum {
 	CCSC_D1_MIXER0_LAYOUT,
 };
 
+#define SUN8I_MAX_LAYERS			5
+
 /**
  * struct sun8i_mixer_cfg - mixer HW configuration
  * @vi_num: number of VI channels
@@ -188,6 +194,11 @@ struct sun8i_mixer {
 	struct clk			*mod_clk;
 
 	int                             used_layers;
+
+	bool				has_irq;
+	bool				scale_updated;
+	bool				scale_update_staged;
+	void				*scale[SUN8I_MAX_LAYERS];
 };
 
 static inline struct sun8i_mixer *
diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
index b2bca0f25b0b..e0fea80593b5 100644
--- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.c
@@ -101,11 +101,12 @@ static void sun8i_ui_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
 		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
 }
 
-static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
+static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
 				       int overlay, struct drm_plane *plane,
 				       unsigned int zpos)
 {
 	struct drm_plane_state *state = plane->state;
+	int channel = layer->channel;
 	u32 src_w, src_h, dst_w, dst_h;
 	u32 bld_base, ch_base;
 	u32 outsize, insize;
@@ -128,17 +129,6 @@ static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
 	insize = SUN8I_MIXER_SIZE(src_w, src_h);
 	outsize = SUN8I_MIXER_SIZE(dst_w, dst_h);
 
-	/* Set height and width */
-	DRM_DEBUG_DRIVER("Layer source offset X: %d Y: %d\n",
-			 state->src.x1 >> 16, state->src.y1 >> 16);
-	DRM_DEBUG_DRIVER("Layer source size W: %d H: %d\n", src_w, src_h);
-	regmap_write(mixer->engine.regs,
-		     SUN8I_MIXER_CHAN_UI_LAYER_SIZE(ch_base, overlay),
-		     insize);
-	regmap_write(mixer->engine.regs,
-		     SUN8I_MIXER_CHAN_UI_OVL_SIZE(ch_base),
-		     insize);
-
 	if (insize != outsize || hphase || vphase) {
 		u32 hscale, vscale;
 
@@ -147,14 +137,24 @@ static int sun8i_ui_layer_update_coord(struct sun8i_mixer *mixer, int channel,
 		hscale = state->src_w / state->crtc_w;
 		vscale = state->src_h / state->crtc_h;
 
-		sun8i_ui_scaler_setup(mixer, channel, src_w, src_h, dst_w,
-				      dst_h, hscale, vscale, hphase, vphase);
-		sun8i_ui_scaler_enable(mixer, channel, true);
+		sun8i_ui_scaler_deferred_setup(mixer, layer, src_w, src_h, dst_w, dst_h,
+					       hscale, vscale, hphase, vphase);
 	} else {
 		DRM_DEBUG_DRIVER("HW scaling is not needed\n");
-		sun8i_ui_scaler_enable(mixer, channel, false);
+		sun8i_ui_scaler_deferred_disable(mixer, layer);
 	}
 
+	/* Set height and width */
+	DRM_DEBUG_DRIVER("Layer source offset X: %d Y: %d\n",
+			 state->src.x1 >> 16, state->src.y1 >> 16);
+	DRM_DEBUG_DRIVER("Layer source size W: %d H: %d\n", src_w, src_h);
+	regmap_write(mixer->engine.regs,
+		     SUN8I_MIXER_CHAN_UI_LAYER_SIZE(ch_base, overlay),
+		     insize);
+	regmap_write(mixer->engine.regs,
+		     SUN8I_MIXER_CHAN_UI_OVL_SIZE(ch_base),
+		     insize);
+
 	/* Set base coordinates */
 	DRM_DEBUG_DRIVER("Layer destination coordinates X: %d Y: %d\n",
 			 state->dst.x1, state->dst.y1);
@@ -277,6 +277,7 @@ static void sun8i_ui_layer_atomic_disable(struct drm_plane *plane,
 		mixer->used_layers--;
 		sun8i_ui_layer_enable(mixer, layer->channel, layer->overlay, false,
 				      mixer->used_layers);
+		sun8i_ui_scaler_deferred_disable(mixer, layer);
 	}
 }
 
@@ -294,8 +295,7 @@ static void sun8i_ui_layer_atomic_update(struct drm_plane *plane,
 		mixer->used_layers++;
 	}
 
-	sun8i_ui_layer_update_coord(mixer, layer->channel,
-				    layer->overlay, plane, zpos);
+	sun8i_ui_layer_update_coord(mixer, layer, layer->overlay, plane, zpos);
 	sun8i_ui_layer_update_alpha(mixer, layer->channel,
 				    layer->overlay, plane, zpos, false);
 	sun8i_ui_layer_update_formats(mixer, layer->channel,
diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
index bd3c30e8058d..2223fb6dd0d1 100644
--- a/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
+++ b/drivers/gpu/drm/sun4i/sun8i_ui_layer.h
@@ -14,6 +14,8 @@
 
 #include <drm/drm_plane.h>
 
+#include "sun8i_ui_scaler.h"
+
 #define SUN8I_MIXER_CHAN_UI_LAYER_ATTR(base, layer) \
 			((base) + 0x20 * (layer) + 0x0)
 #define SUN8I_MIXER_CHAN_UI_LAYER_SIZE(base, layer) \
@@ -60,6 +62,7 @@ struct sun8i_ui_layer {
 	int			overlay;
 
 	bool			en_state;
+	struct sun8i_uis_data   scale;
 };
 
 static inline struct sun8i_ui_layer *
diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
index ae0806bccac7..9d75a0c23732 100644
--- a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
+++ b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.c
@@ -10,7 +10,9 @@
  */
 
 #include "sun8i_ui_scaler.h"
+
 #include "sun8i_vi_scaler.h"
+#include "sun8i_ui_layer.h"
 
 static const u32 lan2coefftab16[240] = {
 	0x00004000, 0x00033ffe, 0x00063efc, 0x000a3bfb,
@@ -127,30 +129,26 @@ static int sun8i_ui_scaler_coef_index(unsigned int step)
 	}
 }
 
-void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
+static void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
 {
-	u32 val, base;
+	u32 base;
 
 	if (WARN_ON(layer < mixer->cfg->vi_num))
 		return;
 
 	base = sun8i_ui_scaler_base(mixer, layer);
 
-	if (enable)
-		val = SUN8I_SCALER_GSU_CTRL_EN |
-		      SUN8I_SCALER_GSU_CTRL_COEFF_RDY;
-	else
-		val = 0;
-
-	regmap_write(mixer->engine.regs, SUN8I_SCALER_GSU_CTRL(base), val);
+	regmap_update_bits(mixer->engine.regs,
+			   SUN8I_SCALER_GSU_CTRL(base),
+			   SUN8I_SCALER_GSU_CTRL_EN,
+			   enable ? SUN8I_SCALER_GSU_CTRL_EN : 0);
 }
 
-void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
-			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-			   u32 hscale, u32 vscale, u32 hphase, u32 vphase)
+static void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
+				  u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				  u32 hscale, u32 vscale, u32 hphase, u32 vphase)
 {
 	u32 insize, outsize;
-	int i, offset;
 	u32 base;
 
 	if (WARN_ON(layer < mixer->cfg->vi_num))
@@ -178,10 +176,71 @@ void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
 		     SUN8I_SCALER_GSU_HPHASE(base), hphase);
 	regmap_write(mixer->engine.regs,
 		     SUN8I_SCALER_GSU_VPHASE(base), vphase);
+}
+
+static void sun8i_ui_scaler_coeff_setup(struct sun8i_mixer *mixer, int layer, u32 hscale)
+{
+	u32 base = sun8i_ui_scaler_base(mixer, layer);
+	int i, offset;
+
 	offset = sun8i_ui_scaler_coef_index(hscale) *
 			SUN8I_UI_SCALER_COEFF_COUNT;
 	for (i = 0; i < SUN8I_UI_SCALER_COEFF_COUNT; i++)
 		regmap_write(mixer->engine.regs,
 			     SUN8I_SCALER_GSU_HCOEFF(base, i),
 			     lan2coefftab16[offset + i]);
+
+	regmap_update_bits(mixer->engine.regs,
+			   SUN8I_SCALER_GSU_CTRL(base),
+			   SUN8I_SCALER_GSU_CTRL_COEFF_RDY,
+			   SUN8I_SCALER_GSU_CTRL_COEFF_RDY);
+}
+
+void sun8i_ui_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer)
+{
+	if (!layer->scale.en)
+		return;
+
+	layer->scale.en = false;
+	mixer->scale[layer->channel] = &layer->scale;
+	mixer->scale_updated = true;
+}
+
+void sun8i_ui_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase)
+{
+	struct sun8i_uis_data data = {
+		.en = true,
+		.src_w = src_w,
+		.src_h = src_h,
+		.dst_w = dst_w,
+		.dst_h = dst_h,
+		.hscale = hscale,
+		.vscale = vscale,
+		.hphase = hphase,
+		.vphase = vphase,
+	};
+
+	/* Skip expensive scaler register setup if nothing changed */
+	if (!memcmp(&data, &layer->scale, sizeof(data)))
+		return;
+
+	/* COEFF double-buffering isn't broken */
+	if (layer->scale.hscale != data.hscale)
+		sun8i_ui_scaler_coeff_setup(mixer, layer->channel, data.hscale);
+
+	memcpy(&layer->scale, &data, sizeof(data));
+	mixer->scale[layer->channel] = &layer->scale;
+	mixer->scale_updated = true;
+}
+
+void sun8i_ui_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_uis_data *data)
+{
+	if (data->en)
+		sun8i_ui_scaler_setup(mixer, layer, data->src_w, data->src_h, data->dst_w,
+				      data->dst_h, data->hscale, data->vscale,
+				      data->hphase, data->vphase);
+
+	sun8i_ui_scaler_enable(mixer, layer, data->en);
 }
diff --git a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
index 1ef4bd6f2718..8b858f6dcbd1 100644
--- a/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
+++ b/drivers/gpu/drm/sun4i/sun8i_ui_scaler.h
@@ -35,9 +35,25 @@
 #define SUN8I_SCALER_GSU_CTRL_EN		BIT(0)
 #define SUN8I_SCALER_GSU_CTRL_COEFF_RDY		BIT(4)
 
-void sun8i_ui_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable);
-void sun8i_ui_scaler_setup(struct sun8i_mixer *mixer, int layer,
-			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-			   u32 hscale, u32 vscale, u32 hphase, u32 vphase);
+struct sun8i_uis_data {
+	bool	en;
+	u32	src_w;
+	u32	src_h;
+	u32	dst_w;
+	u32	dst_h;
+	u32	hscale;
+	u32	vscale;
+	u32	hphase;
+	u32	vphase;
+};
+
+struct sun8i_ui_layer;
+
+void sun8i_ui_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer);
+void sun8i_ui_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_ui_layer *layer,
+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase);
+
+void sun8i_ui_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_uis_data *data);
 
 #endif
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
index ad5c6d86d708..ab87b1229f08 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.c
@@ -104,13 +104,14 @@ static void sun8i_vi_layer_update_alpha(struct sun8i_mixer *mixer, int channel,
 		out_premulti ? SUN8I_MIXER_BLEND_PREMULTIPLY_EN(zpos) : 0);
 }
 
-static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, int channel,
+static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
 				       int overlay, struct drm_plane *plane,
 				       unsigned int zpos)
 {
 	struct drm_plane_state *state = plane->state;
 	const struct drm_format_info *format = state->fb->format;
 	u32 src_w, src_h, dst_w, dst_h;
+	int channel = layer->channel;
 	u32 bld_base, ch_base;
 	u32 outsize, insize;
 	u32 hphase, vphase;
@@ -209,13 +210,12 @@ static int sun8i_vi_layer_update_coord(struct sun8i_mixer *mixer, int channel,
 		hscale = (src_w << 16) / dst_w;
 		vscale = (src_h << 16) / dst_h;
 
-		sun8i_vi_scaler_setup(mixer, channel, src_w, src_h, dst_w,
-				      dst_h, hscale, vscale, hphase, vphase,
-				      format);
-		sun8i_vi_scaler_enable(mixer, channel, true);
+		sun8i_vi_scaler_deferred_setup(mixer, layer, src_w, src_h, dst_w,
+					       dst_h, hscale, vscale, hphase, vphase,
+					       format);
 	} else {
 		DRM_DEBUG_DRIVER("HW scaling is not needed\n");
-		sun8i_vi_scaler_enable(mixer, channel, false);
+		sun8i_vi_scaler_deferred_disable(mixer, layer);
 	}
 
 	regmap_write(mixer->engine.regs,
@@ -411,6 +411,7 @@ static void sun8i_vi_layer_atomic_disable(struct drm_plane *plane,
 		mixer->used_layers--;
 		sun8i_vi_layer_enable(mixer, layer->channel, layer->overlay, false,
 				      mixer->used_layers);
+		sun8i_vi_scaler_deferred_disable(mixer, layer);
 	}
 }
 
@@ -428,8 +429,7 @@ static void sun8i_vi_layer_atomic_update(struct drm_plane *plane,
 		mixer->used_layers++;
 	}
 
-	sun8i_vi_layer_update_coord(mixer, layer->channel,
-				    layer->overlay, plane, zpos);
+	sun8i_vi_layer_update_coord(mixer, layer, layer->overlay, plane, zpos);
 	sun8i_vi_layer_update_alpha(mixer, layer->channel,
 				    layer->overlay, plane, zpos, false);
 	sun8i_vi_layer_update_formats(mixer, layer->channel,
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
index ccf91f09f1fe..449516859328 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_layer.h
@@ -8,6 +8,8 @@
 
 #include <drm/drm_plane.h>
 
+#include "sun8i_vi_scaler.h"
+
 #define SUN8I_MIXER_CHAN_VI_LAYER_ATTR(base, layer) \
 		((base) + 0x30 * (layer) + 0x0)
 #define SUN8I_MIXER_CHAN_VI_LAYER_SIZE(base, layer) \
@@ -65,6 +67,8 @@ struct sun8i_vi_layer {
 	int			overlay;
 
 	bool			en_state;
+
+	struct sun8i_vis_data   scale;
 };
 
 static inline struct sun8i_vi_layer *
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
index 7ba75011adf9..46c5d22adb55 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.c
@@ -11,6 +11,8 @@
 
 #include "sun8i_vi_scaler.h"
 
+#include "sun8i_vi_layer.h"
+
 static const u32 lan3coefftab32_left[480] = {
 	0x40000000, 0x40fe0000, 0x3ffd0100, 0x3efc0100,
 	0x3efb0100, 0x3dfa0200, 0x3cf90200, 0x3bf80200,
@@ -907,7 +909,7 @@ static void sun8i_vi_scaler_set_coeff(struct regmap *map, u32 base,
 	}
 }
 
-void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
+static void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
 {
 	u32 val, base;
 
@@ -923,10 +925,10 @@ void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable)
 		     SUN8I_SCALER_VSU_CTRL(base), val);
 }
 
-void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
-			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
-			   const struct drm_format_info *format)
+static void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
+				  u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				  u32 hscale, u32 vscale, u32 hphase, u32 vphase,
+				  const struct drm_format_info *format)
 {
 	u32 chphase, cvphase;
 	u32 insize, outsize;
@@ -997,3 +999,50 @@ void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
 	sun8i_vi_scaler_set_coeff(mixer->engine.regs, base,
 				  hscale, vscale, format);
 }
+
+void sun8i_vi_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer)
+{
+	if (layer->scale.en) {
+		layer->scale.en = false;
+		mixer->scale[layer->channel] = &layer->scale;
+		mixer->scale_updated = true;
+	}
+}
+
+void sun8i_vi_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase,
+				    const struct drm_format_info *format)
+{
+	struct sun8i_vis_data data = {
+		.en = true,
+		.src_w = src_w,
+		.src_h = src_h,
+		.dst_w = dst_w,
+		.dst_h = dst_h,
+		.hscale = hscale,
+		.vscale = vscale,
+		.hphase = hphase,
+		.vphase = vphase,
+		.format = format,
+	};
+
+	/* Skip expensive register setup if nothing changed, saves ~40uS @ 1.8MHz */
+	if (!memcmp(&data, &layer->scale, sizeof(data)))
+		return;
+
+	sun8i_vi_scaler_setup(mixer, layer->channel, data.src_w, data.src_h, data.dst_w, data.dst_h,
+			      data.hscale, data.vscale, data.hphase, data.vphase, data.format);
+
+	if (!layer->scale.en) {
+		mixer->scale[layer->channel] = &layer->scale;
+		mixer->scale_updated = true;
+	}
+
+	memcpy(&layer->scale, &data, sizeof(data));
+}
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_vis_data *data)
+{
+	sun8i_vi_scaler_enable(mixer, layer, data->en);
+}
diff --git a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
index 68f6593b369a..6e6401c9a5ac 100644
--- a/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
+++ b/drivers/gpu/drm/sun4i/sun8i_vi_scaler.h
@@ -69,10 +69,28 @@
 #define SUN50I_SCALER_VSU_ANGLE_SHIFT(x)		(((x) << 16) & 0xF)
 #define SUN50I_SCALER_VSU_ANGLE_OFFSET(x)		((x) & 0xFF)
 
-void sun8i_vi_scaler_enable(struct sun8i_mixer *mixer, int layer, bool enable);
-void sun8i_vi_scaler_setup(struct sun8i_mixer *mixer, int layer,
-			   u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
-			   u32 hscale, u32 vscale, u32 hphase, u32 vphase,
-			   const struct drm_format_info *format);
+struct sun8i_vis_data {
+	bool				en;
+	u32				src_w;
+	u32				src_h;
+	u32				dst_w;
+	u32				dst_h;
+	u32				hscale;
+	u32				vscale;
+	u32				hphase;
+	u32				vphase;
+	const struct drm_format_info	*format;
+};
+
+struct sun8i_vi_layer;
+
+void sun8i_vi_scaler_deferred_disable(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer);
+
+void sun8i_vi_scaler_deferred_setup(struct sun8i_mixer *mixer, struct sun8i_vi_layer *layer,
+				    u32 src_w, u32 src_h, u32 dst_w, u32 dst_h,
+				    u32 hscale, u32 vscale, u32 hphase, u32 vphase,
+				    const struct drm_format_info *format);
+
+void sun8i_vi_scaler_apply(struct sun8i_mixer *mixer, int layer, struct sun8i_vis_data *data);
 
 #endif
-- 
2.43.0

